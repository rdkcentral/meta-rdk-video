Subject: [PATCH] comcast - dynamic insertion of decryptor

---
 .../gstreamer/eme/CDMProxyThunder.cpp         |   3 +-
 .../graphics/gstreamer/eme/CDMProxyThunder.h  |   1 +
 .../eme/WebKitThunderDecryptorGStreamer.cpp   |   8 +
 .../graphics/gstreamer/mse/AppendPipeline.cpp |   5 +
 .../mse/WebKitMediaSourceGStreamer.cpp        | 219 +++++++++++++++++-
 5 files changed, 233 insertions(+), 3 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.cpp
index 5bd03c1b9779..65d79bbd0383 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.cpp
@@ -90,8 +90,7 @@ bool CDMProxyThunder::decrypt(CDMProxyThunder::DecryptionContext& input)
 
     GST_TRACE("decrypting");
     // Decrypt cipher.
-    OpenCDMError errorCode = opencdm_gstreamer_session_decrypt(session->get(), input.dataBuffer, input.subsamplesBuffer, input.numSubsamples,
-        input.ivBuffer, input.keyIDBuffer, 0);
+    OpenCDMError errorCode = opencdm_gstreamer_session_decrypt_buffer(session->get(), input.dataBuffer, input.caps.get());
     if (errorCode) {
         GST_ERROR("decryption failed, error code %X", errorCode);
         return false;
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.h b/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.h
index ad544364a483..7c1ff0129ed1 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.h
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/CDMProxyThunder.h
@@ -52,6 +52,7 @@ public:
         GstBuffer* ivBuffer;
         GstBuffer* dataBuffer;
         GstBuffer* subsamplesBuffer;
+        GRefPtr<GstCaps> caps;
         size_t numSubsamples;
         WeakPtr<CDMProxyDecryptionClient> cdmProxyDecryptionClient;
     };
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp
index e290c4a6d6b6..df77627efd9a 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp
@@ -156,6 +156,13 @@ static bool decrypt(WebKitMediaCommonEncryptionDecrypt* decryptor, GstBuffer* iv
         return false;
     }
 
+    GRefPtr<GstPad> sinkpad = adoptGRef(gst_element_get_static_pad(reinterpret_cast<GstElement*>(self), "sink"));
+    GRefPtr<GstCaps> caps = adoptGRef(gst_pad_get_current_caps(sinkpad.get()));
+
+    GstStructure *capstruct = gst_caps_get_structure(caps.get(), 0);
+    const gchar* capsinfo = gst_structure_get_string(capstruct, "original-media-type");
+    GST_DEBUG_OBJECT(self, "CAPS %p - Stream Type = %s", caps.get(), capsinfo);
+
     CDMProxyThunder::DecryptionContext context = { };
     context.keyIDBuffer = keyIDBuffer;
     context.ivBuffer = ivBuffer;
@@ -163,6 +170,7 @@ static bool decrypt(WebKitMediaCommonEncryptionDecrypt* decryptor, GstBuffer* iv
     context.numSubsamples = subsampleCount;
     context.subsamplesBuffer = subsampleCount ? subsamplesBuffer : nullptr;
     context.cdmProxyDecryptionClient = webKitMediaCommonEncryptionDecryptGetCDMProxyDecryptionClient(decryptor);
+    context.caps = caps;
     bool result = priv->cdmProxy->decrypt(context);
 
     if (result && !priv->didReportDecryptionStart) {
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
index 6552436222b5..83fdc5994ed3 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
@@ -774,6 +774,11 @@ GRefPtr<GstElement> createOptionalParserForFormat(GstBin* bin, const AtomString&
             GST_WARNING_OBJECT(bin, "Unsupported audio mpeg caps: %" GST_PTR_FORMAT, caps);
         }
     }
+#if ENABLE(THUNDER)
+    // Disable opitonal parser in AppendPipeline to support changeing caps to encrpyted ones
+    // that are not supported by parser (x-cenc)
+    elementClass = "identity";
+#endif
 
     GST_DEBUG_OBJECT(bin, "Creating %s parser for stream with caps %" GST_PTR_FORMAT, elementClass, caps);
     GRefPtr<GstElement> result(makeGStreamerElement(elementClass, parserName.ascii().data()));
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
index 1b2273fdbab4..e6ad6bd96686 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
@@ -107,6 +107,10 @@ static MediaPlayerPrivateGStreamerMSE* webKitMediaSrcPlayer(WebKitMediaSrc*);
 
 struct WebKitMediaSrcPadPrivate {
     WeakPtr<Stream> stream;
+
+#if ENABLE(ENCRYPTED_MEDIA)
+    gulong decryptorProbeId;
+#endif
 };
 
 struct WebKitMediaSrcPad {
@@ -298,6 +302,209 @@ static void webKitMediaSrcConstructed(GObject* object)
     GST_OBJECT_FLAG_SET(object, GST_ELEMENT_FLAG_SOURCE);
 }
 
+#if ENABLE(ENCRYPTED_MEDIA)
+struct DecryptorProbeData
+{
+    DecryptorProbeData(WebKitMediaSrc* parent)
+        : parent(parent) {
+    }
+    ~DecryptorProbeData() {
+        GST_WARNING("Destroying Decryptor probe, decryptor=%p(attached: %s)",
+                    decryptor.get(), decryptorAttached ? "yes" : "no");
+    }
+    WebKitMediaSrc* parent;
+    GRefPtr<GstElement> decryptor;
+    GRefPtr<GstPad> cencParserSrcPad;
+    bool decryptorAttached { false };
+    bool didTryCreatePayloader { false };
+    bool didTryCreateCencParser { false };
+    bool didFail { false };
+    WTF_MAKE_NONCOPYABLE(DecryptorProbeData);
+};
+
+static GstElement* createDecryptor()
+{
+    GstElement* decryptor = gst_element_factory_make("webkitthunder", nullptr);
+    GST_TRACE("returning decryptor %p", decryptor);
+    return decryptor;
+}
+
+static GRefPtr<GstPad> insertElement(GstPad* srcPad, GstElement* element, WebKitMediaSrc* parent)
+{
+    // Parent bin is urisourcebin
+    GRefPtr<GstBin> parentBin = adoptGRef(GST_BIN(gst_element_get_parent(parent)));
+    ASSERT(parentBin);
+    gst_bin_add(parentBin.get(), element);
+    if (!gst_element_sync_state_with_parent(element))
+        GST_WARNING("Failed to sync state of '%s' with parent bin. Proceeding anyway.", GST_ELEMENT_NAME(element));
+
+    GstPadLinkReturn rc;
+    GRefPtr<GstPad> peerPad = adoptGRef(gst_pad_get_peer(srcPad));
+    GRefPtr<GstPad> elementSinkPad = adoptGRef(gst_element_get_static_pad(element, "sink"));
+    GRefPtr<GstPad> elementSrcPad = adoptGRef(gst_element_get_static_pad(element, "src"));
+
+    ASSERT(peerPad);
+    ASSERT(elementSinkPad);
+    ASSERT(elementSrcPad);
+
+    if (!gst_pad_unlink(srcPad, peerPad.get()))
+        GST_ERROR("Failed to unlink '%s' src pad", GST_PAD_NAME(srcPad));
+    else if (GST_PAD_LINK_OK != (rc = gst_pad_link_full(srcPad, elementSinkPad.get(), GST_PAD_LINK_CHECK_NOTHING)))
+        GST_ERROR("Failed to link srcPad to element's sink pad, rc = %d", rc);
+    else if (GST_PAD_LINK_OK != (rc = gst_pad_link_full(elementSrcPad.get(), peerPad.get(), GST_PAD_LINK_CHECK_NOTHING)))
+        GST_ERROR("Failed to link element's src pad to peer pad, rc = %d", rc);
+    else {
+        GST_INFO("Successfully inserted '%s' after '%s'; new source pad: '%s'",
+                 GST_ELEMENT_NAME(element), GST_PAD_NAME(srcPad),
+                 GST_PAD_NAME(elementSrcPad.get()));
+        return elementSrcPad;
+    }
+
+    return { };
+}
+
+static bool tryAttachingCencParser(GstPad* srcPad, GstCaps* caps, DecryptorProbeData* probData)
+{
+    g_return_val_if_fail(srcPad != nullptr, false);
+    if (probData->didTryCreateCencParser)
+        return !!probData->cencParserSrcPad;
+    probData->didTryCreateCencParser = true;
+
+    // Cenc parser is required only for h264 and h265 video streams.
+    if (!WebCore::doCapsHaveType(caps, "video/x-h264") && !WebCore::doCapsHaveType(caps, "video/x-h265"))
+        return false;
+
+    GRefPtr<GstElementFactory> cencParserFactory = adoptGRef(gst_element_factory_find("cencparser"));
+    if (!cencParserFactory)
+        return false;
+
+    GST_DEBUG("Trying cenc parser element");
+    GRefPtr<GstElement> cencParser = gst_element_factory_create(cencParserFactory.get(), nullptr);
+    if (!cencParser) {
+        GST_WARNING("Could not create cenc parser element.");
+        return false;
+    }
+
+    GST_INFO("Inserting cenc parse %s after pad %s for CAPS %" GST_PTR_FORMAT, GST_OBJECT_NAME(cencParser.get()), GST_PAD_NAME(srcPad), caps);
+    probData->cencParserSrcPad = insertElement(srcPad, cencParser.get(), probData->parent);
+    return !!probData->cencParserSrcPad;
+}
+
+static void tryAttachingPayloader(GstPad* srcPad, GstCaps* caps, DecryptorProbeData* probData)
+{
+    if (probData->didTryCreatePayloader)
+        return;
+    probData->didTryCreatePayloader = true;
+
+    // payloader is needed for video streams only
+    if (!WebCore::doCapsHaveType(caps, GST_VIDEO_CAPS_TYPE_PREFIX))
+        return;
+
+    // svppay element is always inserted even for non encrypted caps
+    // to force secure memory video parser so we don't need to replace
+    // parser when encrypted samples arrive
+    GRefPtr<GstElementFactory> payloaderFactory = adoptGRef(gst_element_factory_find("svppay"));
+    if (!payloaderFactory)
+        return;
+
+    GST_DEBUG("Trying payloader for pad %s", GST_PAD_NAME(srcPad));
+    GRefPtr<GstElement> payloader = gst_element_factory_create(payloaderFactory.get(), nullptr);
+    if (!payloader) {
+        GST_WARNING("Could not create svp payloader element.");
+        return;
+    }
+
+    GST_INFO("Inserting payloader %s after pad %s for CAPS %" GST_PTR_FORMAT, GST_OBJECT_NAME(payloader.get()), GST_PAD_NAME(srcPad), caps);
+    insertElement(srcPad, payloader.get(), probData->parent);
+}
+
+static GstPadProbeReturn onWebKitMediaSourcePadEvent(GstPad* srcPad, GstPadProbeInfo* info, gpointer data)
+{
+    if (!(GST_PAD_PROBE_INFO_TYPE (info) & GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM))
+        return GST_PAD_PROBE_OK;
+
+    GstEvent *event = GST_PAD_PROBE_INFO_EVENT (info);
+    if (GST_EVENT_TYPE (event) != GST_EVENT_CAPS)
+        return GST_PAD_PROBE_OK;
+
+    DecryptorProbeData* probData = reinterpret_cast<DecryptorProbeData*>(data);
+    if (probData->didFail)
+        return GST_PAD_PROBE_OK;
+
+    GstCaps* caps = nullptr;
+    gst_event_parse_caps(event, &caps);
+    if (!caps)
+        return GST_PAD_PROBE_OK;
+
+    GST_DEBUG("Got CAPS=%" GST_PTR_FORMAT, caps);
+
+    // Try attaching cenc parser
+    if (tryAttachingCencParser(srcPad, caps, probData))
+        srcPad = probData->cencParserSrcPad.get();
+
+    // Try attach payloader
+    tryAttachingPayloader(srcPad, caps, probData);
+
+    // Dynamically attach decryptor to the pipeline for encrypted streams
+    // and remove it for unencrypted streams.
+    if (!probData->decryptorAttached && WebCore::areEncryptedCaps(caps)) {
+        if (!probData->decryptor) {
+            probData->decryptor = createDecryptor();
+            if (!probData->decryptor) {
+                GST_ERROR("Failed to create decryptor");
+                probData->didFail = true;
+                return GST_PAD_PROBE_OK;
+            }
+            GST_DEBUG("Decryptor %s created for pad %s", GST_OBJECT_NAME(probData->decryptor.get()), GST_PAD_NAME(srcPad));
+
+            // Parent bin is urisourcebin
+            GRefPtr<GstBin> parentBin = adoptGRef(GST_BIN(gst_element_get_parent(probData->parent)));
+            ASSERT(parentBin);
+            gst_bin_add(parentBin.get(), probData->decryptor.get());
+        }
+
+        GST_INFO("Add decryptor %" GST_PTR_FORMAT " on pad: %s for encrypted CAPS=%" GST_PTR_FORMAT, probData->decryptor.get(), GST_PAD_NAME(srcPad), caps);
+        gst_element_sync_state_with_parent(probData->decryptor.get());
+        GRefPtr<GstPad> decryptorSinkPad = adoptGRef(gst_element_get_static_pad(probData->decryptor.get(), "sink"));
+        GRefPtr<GstPad> decryptorSrcPad = adoptGRef(gst_element_get_static_pad(probData->decryptor.get(), "src"));
+        GRefPtr<GstPad> peerPad = adoptGRef(gst_pad_get_peer(srcPad));
+        ASSERT(decryptorSinkPad);
+        ASSERT(decryptorSrcPad);
+        ASSERT(peerPad);
+
+        GstPadLinkReturn rc;
+        if (!gst_pad_unlink(srcPad, peerPad.get()))
+            GST_ERROR("Failed to unlink '%s' src pad", GST_PAD_NAME(srcPad));
+        else if (GST_PAD_LINK_OK != (rc = gst_pad_link_full(srcPad, decryptorSinkPad.get(), GST_PAD_LINK_CHECK_NOTHING)))
+            GST_ERROR("Failed to link srcPad to decryptorSinkPad, rc = %d", rc);
+        else if (GST_PAD_LINK_OK != (rc = gst_pad_link_full(decryptorSrcPad.get(), peerPad.get(), GST_PAD_LINK_CHECK_NOTHING)))
+            GST_ERROR("Failed to link decryptorSrcPad to peerPad, rc = %d", rc);
+        else {
+            probData->decryptorAttached = true;
+        }
+    } else if (probData->decryptorAttached && !WebCore::areEncryptedCaps(caps)) {
+        GST_INFO("Remove decryptor %" GST_PTR_FORMAT " on pad: %s for clear CAPS=%" GST_PTR_FORMAT, probData->decryptor.get() , GST_PAD_NAME(srcPad), caps);
+        ASSERT(probData->decryptor);
+
+        GRefPtr<GstPad> decryptorSinkPad = adoptGRef(gst_element_get_static_pad(probData->decryptor.get(), "sink"));
+        GRefPtr<GstPad> decryptorSrcPad = adoptGRef(gst_element_get_static_pad(probData->decryptor.get(), "src"));
+        GRefPtr<GstPad> peerPad = adoptGRef(gst_pad_get_peer(decryptorSrcPad.get()));
+        GstPadLinkReturn rc;
+
+        if (!gst_pad_unlink(decryptorSrcPad.get(), peerPad.get()))
+            GST_ERROR("Failed to unlink decryptorSrcPad");
+        else if (!gst_pad_unlink(srcPad, decryptorSinkPad.get()))
+            GST_ERROR("Failed to unlink decryptorSinkPad");
+        else if (GST_PAD_LINK_OK != (rc = gst_pad_link_full(srcPad, peerPad.get(), GST_PAD_LINK_CHECK_NOTHING)))
+            GST_ERROR("Failed to link '%s' to peer pad, rc = %d", GST_PAD_NAME(srcPad), rc);
+
+        probData->decryptorAttached = false;
+    }
+
+    return GST_PAD_PROBE_OK;
+}
+#endif
+
 void webKitMediaSrcEmitStreams(WebKitMediaSrc* source, const Vector<RefPtr<MediaSourceTrackGStreamer>>& tracks)
 {
     ASSERT(isMainThread());
@@ -346,6 +553,12 @@ void webKitMediaSrcEmitStreams(WebKitMediaSrc* source, const Vector<RefPtr<Media
             if (state > GST_STATE_READY)
                 gst_pad_set_active(GST_PAD(stream->pad.get()), true);
         }
+#if ENABLE(ENCRYPTED_MEDIA)
+        WEBKIT_MEDIA_SRC_PAD(stream->pad.get())->priv->decryptorProbeId =
+            gst_pad_add_probe(stream->pad.get(), GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM,
+                    onWebKitMediaSourcePadEvent, new DecryptorProbeData(source),
+                    [](gpointer data) { delete static_cast<DecryptorProbeData*>(data); });
+#endif
         GST_DEBUG_OBJECT(source, "Adding pad '%s' for stream with name '%s'", GST_OBJECT_NAME(stream->pad.get()), stream->track->trackId().string().utf8().data());
         gst_element_add_pad(GST_ELEMENT(source), GST_PAD(stream->pad.get()));
         gst_pad_remove_probe(GST_PAD(stream->pad.get()), blockId);
@@ -374,8 +587,12 @@ static void webKitMediaSrcTearDownStream(WebKitMediaSrc* source, const AtomStrin
     // Stop the thread now.
     gst_pad_set_active(stream->pad.get(), false);
 
-    if (source->priv->isStarted())
+    if (source->priv->isStarted()) {
         gst_element_remove_pad(GST_ELEMENT(source), stream->pad.get());
+#if ENABLE(ENCRYPTED_MEDIA)
+        gst_pad_remove_probe(stream->pad.get(), WEBKIT_MEDIA_SRC_PAD(stream->pad.get())->priv->decryptorProbeId);
+#endif
+    }
     source->priv->streams.remove(name);
 }
 
-- 
2.25.1

