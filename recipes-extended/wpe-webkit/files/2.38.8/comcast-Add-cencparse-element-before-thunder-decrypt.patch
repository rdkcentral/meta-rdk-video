From 5ddfbcf2654120c15a7d24e970353f7b9500034e Mon Sep 17 00:00:00 2001
From: Andrzej Surdej <Andrzej_Surdej@comcast.com>
Date: Wed, 4 Jun 2025 12:21:28 +0200
Subject: [PATCH] comcast - Add cencparse element before thunder decrypt

Signed-off-by: Andrzej Surdej <Andrzej_Surdej@comcast.com>
---
 .../mse/WebKitMediaSourceGStreamer.cpp        | 58 +++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
index fcb35486d0c2..c46a07b7c79f 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
@@ -364,13 +364,67 @@ struct _DecryptorProbeData
     WebKitMediaSrc* parent;
     GRefPtr<GstElement> decryptor;
     GRefPtr<GstElement> payloader;
+    GRefPtr<GstPad> cencParserSrcPad;
     bool decryptorAttached { false };
     bool didTryCreatePayloader { false };
+    bool didTryCreateCencParser { false };
     bool payloaderAttached { false };
     bool didFail { false };
     WTF_MAKE_NONCOPYABLE(_DecryptorProbeData);
 };
 
+bool tryAttachingCencParser(GstPad* srcPad, GstCaps* caps, GRefPtr<GstBin> parentBin, DecryptorProbeData* probData)
+{
+    g_return_val_if_fail(srcPad != nullptr, false);
+
+    if (probData->didTryCreateCencParser)
+        return !!probData->cencParserSrcPad;
+    probData->didTryCreateCencParser = true;
+
+    // Cenc parser is required only for h264 and h265 video streams.
+    if (!WebCore::doCapsHaveType(caps, "video/x-h264") && !WebCore::doCapsHaveType(caps, "video/x-h265"))
+        return false;
+
+    const char* cencParserElementName = "cencparser";
+    GRefPtr<GstElementFactory> cencParserFactory = adoptGRef(gst_element_factory_find(cencParserElementName));
+    if (!cencParserFactory)
+        return false;
+
+    GST_DEBUG("Found cenc parser element: '%s'", cencParserElementName);
+
+    GRefPtr<GstElement> cencParser;
+    cencParser = gst_element_factory_create(cencParserFactory.get(), nullptr);
+    if (!cencParser) {
+        GST_WARNING("Failed to create cenc parser element: '%s'", cencParserElementName);
+        return false;
+    }
+
+    gst_bin_add(parentBin.get(), cencParser.get());
+    if (!gst_element_sync_state_with_parent(cencParser.get()))
+        GST_WARNING("Failed to sync state of cenc parser element '%s' with parent bin. Proceeding anyway.", GST_ELEMENT_NAME(cencParser.get()));
+
+    GstPadLinkReturn rc;
+    GRefPtr<GstPad> peerPad = adoptGRef(gst_pad_get_peer(srcPad));
+    GRefPtr<GstPad> cencParserSinkPad = adoptGRef(gst_element_get_static_pad(cencParser.get(), "sink"));
+    GRefPtr<GstPad> cencParserSrcPad = adoptGRef(gst_element_get_static_pad(cencParser.get(), "src"));
+    if (!gst_pad_unlink(srcPad, peerPad.get()))
+        GST_ERROR("Failed to unlink '%s' src pad", GST_PAD_NAME(srcPad));
+    else if (GST_PAD_LINK_OK != (rc = gst_pad_link(srcPad, cencParserSinkPad.get())))
+        GST_ERROR("Failed to link pad to cencParserSinkPad, rc = %d", rc);
+    else if (GST_PAD_LINK_OK != (rc = gst_pad_link_full(cencParserSrcPad.get(), peerPad.get(), GST_PAD_LINK_CHECK_NOTHING)))
+        GST_ERROR("Failed to link cencParserSrcPad to peer pad, rc = %d", rc);
+    else {
+        probData->cencParserSrcPad = WTFMove(cencParserSrcPad);
+        GST_INFO("Successfully inserted cenc parser '%s' for pad '%s' into bin '%s'. New source pad: '%s'",
+                 GST_ELEMENT_NAME(cencParser.get()),
+                 GST_PAD_NAME(srcPad),
+                 GST_ELEMENT_NAME(parentBin.get()),
+                 GST_PAD_NAME(probData->cencParserSrcPad.get()));
+    }
+
+    return !!probData->cencParserSrcPad;
+}
+
 GstPadProbeReturn onWebKitMediaSourcePadEvent(GstPad* pad, GstPadProbeInfo* info, gpointer data)
 {
     if (!(GST_PAD_PROBE_INFO_TYPE (info) & GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM))
@@ -398,6 +452,10 @@ GstPadProbeReturn onWebKitMediaSourcePadEvent(GstPad* pad, GstPadProbeInfo* info
     GstElement* payloader = probData->payloader.get();
     bool payloaderAttached = payloader && probData->payloaderAttached;
 
+    // inject cenc parser
+    if (tryAttachingCencParser(pad, caps, parent_bin, probData))
+        pad = probData->cencParserSrcPad.get();
+
     if (probData->didTryCreatePayloader == false)
     {
         probData->didTryCreatePayloader = true;
-- 
2.25.1

