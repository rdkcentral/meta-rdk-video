From 923456d7bb21bb3db6c92aab496947c52d72a88b Mon Sep 17 00:00:00 2001
From: "Vivek.A" <Vivek_Arumugam@comcast.com>
Date: Wed, 20 Sep 2023 04:32:38 +0000
Subject: [PATCH 1/2] Update position to help sink elements that relies on
 Segment.position

---
 .../graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp   | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
index 77f07e5f2e6c..5de1f5fe9407 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
@@ -172,7 +172,7 @@ struct Stream : public ThreadSafeRefCounted<Stream> {
             : pendingInitialCaps(WTFMove(initialCaps))
         {
             gst_segment_init(&segment, GST_FORMAT_TIME);
-            segment.start = segment.time = startTime;
+            segment.position = segment.start = segment.time = startTime;
             segment.rate = rate;
             ASSERT(pendingInitialCaps);
         }
@@ -625,7 +625,7 @@ static void webKitMediaSrcStreamFlush(Stream* stream, bool isSeekingFlush)
         DataMutexLocker streamingMembers { stream->streamingMembersDataMutex };
         streamingMembers->segment.base = 0;
         streamingMembers->segment.rate = priv->rate;
-        streamingMembers->segment.start = streamingMembers->segment.time = priv->startTime;
+        streamingMembers->segment.position = streamingMembers->segment.start = streamingMembers->segment.time = priv->startTime;
     } else {
         // In the case of non-seeking flushes we don't reset the timeline, so instead we need to increase the `base` field
         // by however running time we're starting after the flush.
@@ -653,7 +653,7 @@ static void webKitMediaSrcStreamFlush(Stream* stream, bool isSeekingFlush)
                 GST_DEBUG_OBJECT(stream->source, "Resetting segment to current pipeline running time (%" GST_TIME_FORMAT " and stream time (%" GST_TIME_FORMAT " = %s)",
                     GST_TIME_ARGS(pipelineRunningTime), GST_TIME_ARGS(pipelineStreamTime), streamTime.toString().ascii().data());
                 streamingMembers->segment.base = pipelineRunningTime;
-                streamingMembers->segment.start = streamingMembers->segment.time = static_cast<GstClockTime>(pipelineStreamTime);
+                streamingMembers->segment.position = streamingMembers->segment.start = streamingMembers->segment.time = static_cast<GstClockTime>(pipelineStreamTime);
             }
         }
     }
-- 
2.25.1


From 8f0b9b0a368ebc4f59aa28b05e5d4addf4da69a1 Mon Sep 17 00:00:00 2001
From: Pawel Lampe <pawel.lampe@sky.uk>
Date: Mon, 23 Oct 2023 10:01:47 -0400
Subject: [PATCH 2/2] Fix invalid segment start after rebuffering

---
 .../graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp      | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
index 792adde5ce69..9eabc6edf9f2 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
@@ -594,6 +594,9 @@ static void webKitMediaSrcStreamFlush(Stream* stream, bool isSeekingFlush, GstCl
         }
     }
 
+    if (!isSeekingFlush && skipFlush)
+        return;
+
     if (!skipFlush) {
         // Signal the loop() function to stop waiting for any condition variable, pause the task and return,
         // which will keeping the streaming thread idle.
-- 
2.25.1

