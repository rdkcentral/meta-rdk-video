From 0d803137133da226d6440e5204733e031f969b39 Mon Sep 17 00:00:00 2001
From: Manoj Bhatta <manoj_bhatta@comcast.com>
Date: Fri, 11 Oct 2024 00:30:34 +0000
Subject: [PATCH] Send analog button values based on W3C GamePad

This PR dependent on lib WPE changes for getting Gamepad button values from 00 to 1.0.
WebPlatformForEmbedded/libwpe#133

https://www.w3.org/TR/gamepad/#dom-gamepadbutton-value

value attribute
For buttons that have an analog sensor, this property MUST represent the amount which the button has been pressed. All button values MUST be linearly normalized to the range [0.0 .. 1.0]. 0.0 MUST mean fully unpressed, and 1.0 MUST mean fully pressed. For buttons without an analog sensor, only the values 0.0 and 1.0 for fully unpressed and fully pressed respectively, MUST be provided.
---
 .../WebCore/platform/gamepad/wpe/WPEGamepad.cpp  | 16 +++++++++++++++-
 Source/WebCore/platform/gamepad/wpe/WPEGamepad.h |  1 +
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/Source/WebCore/platform/gamepad/wpe/WPEGamepad.cpp b/Source/WebCore/platform/gamepad/wpe/WPEGamepad.cpp
index 284b5e35abfc..107f7e8e9459 100644
--- a/Source/WebCore/platform/gamepad/wpe/WPEGamepad.cpp
+++ b/Source/WebCore/platform/gamepad/wpe/WPEGamepad.cpp
@@ -58,7 +58,12 @@ WPEGamepad::WPEGamepad(struct wpe_gamepad_provider* provider, uintptr_t gamepadI
             auto& self = *static_cast<WPEGamepad*>(data);
             self.absoluteAxisChanged(static_cast<unsigned>(axis), value);
         },
-        nullptr, nullptr, nullptr,
+        // analog_button_value
+        [](void* data, enum wpe_gamepad_button button, double value) {
+            auto& self = *static_cast<WPEGamepad*>(data);
+            self.analogButtonChanged(static_cast<unsigned>(button), value);
+        },
+        nullptr, nullptr,
     };
     wpe_gamepad_set_client(m_gamepad.get(), &s_client, this);
 }
@@ -84,6 +89,15 @@ void WPEGamepad::absoluteAxisChanged(unsigned axis, double value)
     WPEGamepadProvider::singleton().scheduleInputNotification(*this, WPEGamepadProvider::ShouldMakeGamepadsVisible::Yes);
 }
 
+void WPEGamepad::analogButtonChanged(unsigned button, double value)
+{
+    m_lastUpdateTime = MonotonicTime::now();
+    m_buttonValues[button].setValue(value);
+
+    WPEGamepadProvider::singleton().scheduleInputNotification(*this, WPEGamepadProvider::ShouldMakeGamepadsVisible::Yes);
+
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(GAMEPAD)
diff --git a/Source/WebCore/platform/gamepad/wpe/WPEGamepad.h b/Source/WebCore/platform/gamepad/wpe/WPEGamepad.h
index 6e6a1fcbcef3..515b8dc13409 100644
--- a/Source/WebCore/platform/gamepad/wpe/WPEGamepad.h
+++ b/Source/WebCore/platform/gamepad/wpe/WPEGamepad.h
@@ -48,6 +48,7 @@ public:
 private:
     void buttonPressedOrReleased(unsigned, bool);
     void absoluteAxisChanged(unsigned, double);
+    void analogButtonChanged(unsigned, double);
 
     Vector<SharedGamepadValue> m_buttonValues;
     Vector<SharedGamepadValue> m_axisValues;
-- 
2.25.1

