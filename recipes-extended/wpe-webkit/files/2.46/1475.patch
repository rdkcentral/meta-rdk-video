From c7ddb93fada28599c8af407a1f0cba2415e6d7ae Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Wed, 18 Oct 2023 07:45:10 -0400
Subject: [PATCH] [GStreamer] Add quirk supporting instant rate change with
 custom event

---
 .../gstreamer/MediaPlayerPrivateGStreamer.cpp    | 16 ++++++++++++++--
 .../gstreamer/mse/WebKitMediaSourceGStreamer.cpp | 13 +++++++++++++
 .../platform/gstreamer/GStreamerQuirkAmLogic.cpp |  5 +++++
 .../platform/gstreamer/GStreamerQuirkAmLogic.h   |  1 +
 .../gstreamer/GStreamerQuirkBroadcom.cpp         |  5 +++++
 .../platform/gstreamer/GStreamerQuirkBroadcom.h  |  1 +
 .../platform/gstreamer/GStreamerQuirkRealtek.cpp |  5 +++++
 .../platform/gstreamer/GStreamerQuirkRealtek.h   |  1 +
 .../platform/gstreamer/GStreamerQuirkRialto.cpp  |  5 +++++
 .../platform/gstreamer/GStreamerQuirkRialto.h    |  1 +
 .../gstreamer/GStreamerQuirkWesteros.cpp         |  5 +++++
 .../platform/gstreamer/GStreamerQuirkWesteros.h  |  1 +
 .../platform/gstreamer/GStreamerQuirks.cpp       | 10 ++++++++++
 .../WebCore/platform/gstreamer/GStreamerQuirks.h |  4 ++++
 14 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index d5b320be5a255..5d63061662746 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -709,7 +709,19 @@ void MediaPlayerPrivateGStreamer::updatePlaybackRate()
     GST_INFO_OBJECT(pipeline(), mute ? "Need to mute audio" : "Do not need to mute audio");
 
     if (m_lastPlaybackRate != m_playbackRate) {
-        if (doSeek(SeekTarget { playbackPosition() }, m_playbackRate)) {
+        auto& quirksManager = GStreamerQuirksManager::singleton();
+        bool didInstantRateChange = false;
+        if (m_isPipelinePlaying && quirksManager.shouldUseCustomInstantRateChange() &&
+            !isPipelineWaitingPreroll()) {
+            GstStructure* s = gst_structure_new("custom-instant-rate-change",
+                "rate", G_TYPE_DOUBLE, m_playbackRate, nullptr);
+            didInstantRateChange = gst_element_send_event(
+                pipeline(), gst_event_new_custom(GST_EVENT_CUSTOM_DOWNSTREAM_OOB, s));
+        }
+        if (didInstantRateChange) {
+            g_object_set(m_pipeline.get(), "mute", mute, nullptr);
+            m_lastPlaybackRate = m_playbackRate;
+        } else if (doSeek(SeekTarget { playbackPosition() }, m_playbackRate)) {
             g_object_set(m_pipeline.get(), "mute", mute, nullptr);
             m_lastPlaybackRate = m_playbackRate;
         } else {
@@ -3267,7 +3279,7 @@ void MediaPlayerPrivateGStreamer::createGSTPlayBin(const URL& url)
 
     g_object_set(m_pipeline.get(), "audio-sink", m_audioSink.get(), "video-sink", createVideoSink(), nullptr);
 
-    if (m_shouldPreservePitch && !isMediaStream) {
+    if (m_shouldPreservePitch && !isMediaStream && !GStreamerQuirksManager::singleton().shouldUseCustomInstantRateChange()) {
         if (auto* scale = makeGStreamerElement("scaletempo", nullptr))
             g_object_set(m_pipeline.get(), "audio-filter", scale, nullptr);
     }
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
index 30da5cb84a225..1549482366429 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
@@ -702,6 +702,7 @@ static void webKitMediaSrcStreamFlush(Stream* stream, bool isSeekingFlush)
                 GST_DEBUG_OBJECT(stream->source, "Resetting segment to current pipeline running time (%" GST_TIME_FORMAT " and stream time (%" GST_TIME_FORMAT " = %s)",
                     GST_TIME_ARGS(pipelineRunningTime), GST_TIME_ARGS(pipelineStreamTime), streamTime.toString().ascii().data());
                 streamingMembers->segment.base = pipelineRunningTime;
+                streamingMembers->segment.rate = stream->source->priv->rate;
                 streamingMembers->segment.start = streamingMembers->segment.time = static_cast<GstClockTime>(pipelineStreamTime);
             }
         }
@@ -836,6 +837,18 @@ static gboolean webKitMediaSrcSendEvent(GstElement* element, GstEvent* eventTran
         webKitMediaSrcSeek(WEBKIT_MEDIA_SRC(element), start, rate);
         return true;
     }
+    case GST_EVENT_CUSTOM_DOWNSTREAM_OOB: {
+        WebKitMediaSrc* source = WEBKIT_MEDIA_SRC(element);
+        gboolean result = !source->priv->streams.isEmpty();
+        for (const RefPtr<Stream>& stream : source->priv->streams.values())
+            result &= gst_pad_push_event(stream->pad.get(), gst_event_ref(event.get()));
+        if (gst_event_has_name(event.get(), "custom-instant-rate-change")) {
+            gdouble rate = 1.0;
+            if (gst_structure_get_double(gst_event_get_structure(event.get()), "rate", &rate))
+                source->priv->rate = rate;
+        }
+        return result;
+    }
     default:
         return GST_ELEMENT_CLASS(webkit_media_src_parent_class)->send_event(element, event.leakRef());
     }
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.cpp b/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.cpp
index 610f026e434d1..b3e672b5f96e3 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.cpp
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.cpp
@@ -61,6 +61,11 @@ void GStreamerQuirkAmLogic::configureElement(GstElement* element, const OptionSe
     }
 }
 
+bool GStreamerQuirkAmLogic::shouldUseCustomInstantRateChange() const
+{
+    return true;
+}
+
 #undef GST_CAT_DEFAULT
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.h b/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.h
index 8643498a5492a..c82797ca4efa3 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.h
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkAmLogic.h
@@ -33,6 +33,7 @@ class GStreamerQuirkAmLogic final : public GStreamerQuirk {
 
     GstElement* createWebAudioSink() final;
     void configureElement(GstElement*, const OptionSet<ElementRuntimeCharacteristics>&) final;
+    bool shouldUseCustomInstantRateChange() const final;
 };
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.cpp b/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.cpp
index 8bf195f4ab7a0..7ed7d8725ee16 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.cpp
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.cpp
@@ -64,6 +64,11 @@ std::optional<bool> GStreamerQuirkBroadcom::isHardwareAccelerated(GstElementFact
     return std::nullopt;
 }
 
+bool GStreamerQuirkBroadcom::shouldUseCustomInstantRateChange() const
+{
+    return true;
+}
+
 #undef GST_CAT_DEFAULT
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.h b/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.h
index b6e75b024e885..fe750ff34e08b 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.h
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkBroadcom.h
@@ -39,6 +39,7 @@ class GStreamerQuirkBroadcom final : public GStreamerQuirkBroadcomBase {
     Vector<String> disallowedWebAudioDecoders() const final { return m_disallowedWebAudioDecoders; }
     unsigned getAdditionalPlaybinFlags() const final { return getGstPlayFlag("text") | getGstPlayFlag("native-audio"); }
     bool shouldParseIncomingLibWebRTCBitStream() const final { return false; }
+    bool shouldUseCustomInstantRateChange() const final;
 
 private:
     Vector<String> m_disallowedWebAudioDecoders;
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.cpp b/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.cpp
index 390df682013c8..34cbea2297bdb 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.cpp
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.cpp
@@ -79,6 +79,11 @@ std::optional<bool> GStreamerQuirkRealtek::isHardwareAccelerated(GstElementFacto
     return std::nullopt;
 }
 
+bool GStreamerQuirkRealtek::shouldUseCustomInstantRateChange() const
+{
+    return true;
+}
+
 #undef GST_CAT_DEFAULT
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.h b/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.h
index 98fdbae46bd34..e31a7369e4b26 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.h
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkRealtek.h
@@ -36,6 +36,7 @@ class GStreamerQuirkRealtek final : public GStreamerQuirk {
     std::optional<bool> isHardwareAccelerated(GstElementFactory*) final;
     Vector<String> disallowedWebAudioDecoders() const final { return m_disallowedWebAudioDecoders; }
     bool shouldParseIncomingLibWebRTCBitStream() const final { return false; }
+    bool shouldUseCustomInstantRateChange() const final;
 
 private:
     Vector<String> m_disallowedWebAudioDecoders;
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.cpp b/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.cpp
index 24054b9022a9e..696c7bd0db652 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.cpp
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.cpp
@@ -100,6 +100,11 @@ std::optional<bool> GStreamerQuirkRialto::isHardwareAccelerated(GstElementFactor
     return std::nullopt;
 }
 
+bool GStreamerQuirkRialto::shouldUseCustomInstantRateChange() const
+{
+    return true;
+}
+
 #undef GST_CAT_DEFAULT
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.h b/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.h
index 2761c9297725e..72b7e18354792 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.h
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkRialto.h
@@ -42,6 +42,7 @@ class GStreamerQuirkRialto final : public GStreamerQuirk {
     std::optional<bool> isHardwareAccelerated(GstElementFactory*) final;
     bool shouldParseIncomingLibWebRTCBitStream() const final { return false; }
     unsigned getAdditionalPlaybinFlags() const { return getGstPlayFlag("text") | getGstPlayFlag("native-audio") | getGstPlayFlag("native-video"); }
+    bool shouldUseCustomInstantRateChange() const final;
 
 private:
     GRefPtr<GstCaps> m_sinkCaps;
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.cpp b/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.cpp
index 4b3e0c9053b01..cd0be1cf66f11 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.cpp
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.cpp
@@ -79,6 +79,11 @@ std::optional<bool> GStreamerQuirkWesteros::isHardwareAccelerated(GstElementFact
     return std::nullopt;
 }
 
+bool GStreamerQuirkWesteros::shouldUseCustomInstantRateChange() const
+{
+    return true;
+}
+
 #undef GST_CAT_DEFAULT
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.h b/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.h
index a6b6903bb86d6..33287fc5167b5 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.h
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirkWesteros.h
@@ -34,6 +34,7 @@ class GStreamerQuirkWesteros final : public GStreamerQuirk {
     void configureElement(GstElement*, const OptionSet<ElementRuntimeCharacteristics>&) final;
     std::optional<bool> isHardwareAccelerated(GstElementFactory*) final;
     unsigned getAdditionalPlaybinFlags() const final { return getGstPlayFlag("text") | getGstPlayFlag("native-video"); }
+    bool shouldUseCustomInstantRateChange() const final;
 
 private:
     GRefPtr<GstCaps> m_sinkCaps;
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirks.cpp b/Source/WebCore/platform/gstreamer/GStreamerQuirks.cpp
index 56d012a3bc54a..cd3d2d4dee7ca 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirks.cpp
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirks.cpp
@@ -343,6 +343,16 @@ void GStreamerQuirksManager::processWebAudioSilentBuffer(GstBuffer* buffer) cons
     }
 }
 
+bool GStreamerQuirksManager::shouldUseCustomInstantRateChange() const
+{
+    for (auto& quirk : m_quirks) {
+        if (quirk->shouldUseCustomInstantRateChange())
+            return true;
+    }
+    return false;
+}
+
+
 #undef GST_CAT_DEFAULT
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gstreamer/GStreamerQuirks.h b/Source/WebCore/platform/gstreamer/GStreamerQuirks.h
index 644517bf7604d..d90ecccd2cad0 100644
--- a/Source/WebCore/platform/gstreamer/GStreamerQuirks.h
+++ b/Source/WebCore/platform/gstreamer/GStreamerQuirks.h
@@ -94,6 +94,8 @@ class GStreamerQuirk : public GStreamerQuirkBase {
         GST_BUFFER_FLAG_SET(buffer, GST_BUFFER_FLAG_DROPPABLE);
         return false;
     }
+
+    virtual bool shouldUseCustomInstantRateChange() const { return false; }
 };
 
 class GStreamerHolePunchQuirk : public GStreamerQuirkBase {
@@ -147,6 +149,8 @@ class GStreamerQuirksManager : public RefCounted<GStreamerQuirksManager> {
     void setupBufferingPercentageCorrection(MediaPlayerPrivateGStreamer*, GstState currentState, GstState newState, GRefPtr<GstElement>&&) const;
 
     void processWebAudioSilentBuffer(GstBuffer*) const;
+
+    bool shouldUseCustomInstantRateChange() const;
 private:
     GStreamerQuirksManager(bool, bool);
 
