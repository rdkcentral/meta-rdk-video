Index: git/Source/cryptography/implementation/SecApi/Vault.cpp
===================================================================
--- git.orig/Source/cryptography/implementation/SecApi/Vault.cpp
+++ git/Source/cryptography/implementation/SecApi/Vault.cpp
@@ -53,12 +53,28 @@ namespace Implementation {
     /*To release sec processor resource explicitly.Before this call make sure to call Release on hmac, cipher or dh objects if used*/
     void Vault::ProcessorRelease()
     {
+       _lock.Lock();
        if (_secProcHandle != NULL) {
             SecProcessor_Release(_secProcHandle);
             _secProcHandle = NULL;
         }
+       _lock.Unlock();
     }
 
+     void Vault::ProcessorAcquire()
+     {
+	     _lock.Lock();
+	     if (_secProcHandle == NULL) {
+		     Sec_Result sec_res = SecProcessor_GetInstance_Directories(&_secProcHandle, globalDir, appDir);
+		     if (sec_res != SEC_RESULT_SUCCESS) {
+			     TRACE_L1(_T("SEC : proccesor instance failed retval= %d\n"),sec_res);
+			     _secProcHandle = NULL;
+		     }
+		     _lastHandle = 0x80000000;
+	     }
+	     _lock.Unlock();
+     }
+
     /*********************************************************************
      * @function Size 
      *
@@ -573,7 +589,10 @@ extern "C" {
                 vault = &(instance);
 
             if (vault != nullptr)
+            {
                 TRACE_L2(_T("SEC :VAULT DEFAULT CASE \n"));
+		vault->ProcessorAcquire();
+	    }
             Implementation::vaultId = CRYPTOGRAPHY_VAULT_DEFAULT; //DEFAULT
             break;
             }
Index: git/Source/cryptography/implementation/SecApi/Vault.h
===================================================================
--- git.orig/Source/cryptography/implementation/SecApi/Vault.h
+++ git/Source/cryptography/implementation/SecApi/Vault.h
@@ -119,6 +119,7 @@ namespace Implementation {
         uint32_t CreateNamedKey(const char keyFile[],bool exportable ,const key_type keyType);
         bool CheckNamedKey(const char keyFile[]);
         void ProcessorRelease();
+	void ProcessorAcquire();
 
     private:
         mutable WPEFramework::Core::CriticalSection _lock;
