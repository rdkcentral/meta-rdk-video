From: Anand Kandasamy <Anand_Kandasamy@comcast.com>
Date: Fri, 19 Mar 2021 17:22:11 -0400
Subject: [PATCH] RDK:28534: Security Agent Utility and Logging
Upstream-Status: Pending
Signed-off-by: Anand Kandasamy <Anand_Kandasamy@comcast.com>
---
 Source/WPEFramework/CMakeLists.txt   |  5 +++
 Source/WPEFramework/PluginServer.cpp | 19 +++++++++
 Source/WPEFramework/PluginServer.h   | 60 ++++++++++++++++++++++++----
 cmake/modules/FindRFC.cmake          | 23 +++++++++++
 5 files changed, 103 insertions(+), 7 deletions(-)
 create mode 100644 cmake/modules/FindRFC.cmake

diff --git a/Source/WPEFramework/CMakeLists.txt b/Source/WPEFramework/CMakeLists.txt
index 3ad0321f..fdef8c3c 100644
--- a/Source/WPEFramework/CMakeLists.txt
+++ b/Source/WPEFramework/CMakeLists.txt
@@ -17,6 +17,8 @@
 
 find_package(Threads REQUIRED)
 
+find_package(RFC)
+
 get_filename_component(TARGET ${CMAKE_CURRENT_SOURCE_DIR} NAME)
 
 set(THREADPOOL_COUNT "4" CACHE STRING "The number of threads in the thread pool")
@@ -57,6 +59,8 @@ if (EXCEPTION_CATCHING)
     set_source_files_properties( PluginServer.cpp PROPERTIES COMPILE_FLAGS "-fexceptions" )
 endif()
 
+target_include_directories(${TARGET} PRIVATE ${RFC_INCLUDE_DIRS})
+
 target_link_libraries(${TARGET}
         PRIVATE
           CompileSettingsDebug::CompileSettingsDebug
@@ -67,6 +71,7 @@ target_link_libraries(${TARGET}
           ${NAMESPACE}WebSocket::${NAMESPACE}WebSocket
           ${NAMESPACE}Plugins::${NAMESPACE}Plugins
           ${NAMESPACE}COMProcess::${NAMESPACE}COMProcess  # For COM executable define
+          ${RFC_LIBRARIES}
           Threads::Threads
         )
 
diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 04bae677..d834e8f5 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -1089,6 +1089,25 @@ POP_WARNING()
             securityProvider->Security(false);
         } else {
             SYSLOG(Logging::Startup, (_T("Security ENABLED, incoming requests need to be authorized!!!")));
+
+            // If RFC for Thunder Security is set to false, disable security.
+            if(_services.isThunderSecurityEnabled())
+            {
+                SYSLOG(Logging::Startup, (_T("Security ENABLED, incoming requests need to be authorized!!!")));
+                //activate Security Agent Plugin
+                Core::ProxyType<IShell> service;
+                uint32_t result = _services.FromIdentifier("SecurityAgent", service);
+               if(result == Core::ERROR_NONE)
+                {
+                    service->Activate(PluginHost::IShell::STARTUP);
+                }
+
+            }
+            else
+            {
+                SYSLOG(Logging::Startup, (_T("Security DISABLED. Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.ThunderSecurity.Enable set to false")));
+                securityProvider->Security(false);
+            }
         }
 
         securityProvider->Release();
diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index 317be4fd..375dde11 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -35,6 +35,8 @@
 #error "Please define the name of the COM process!!!"
 #endif
 
+#include "rfcapi.h"
+
 #define MAX_EXTERNAL_WAITS 2000 /* Wait for 2 Seconds */
 
 namespace WPEFramework {
@@ -2853,10 +2855,14 @@ POP_WARNING()
                     _engine)
                 , _subSystems(this)
                 , _authenticationHandler(nullptr)
+                , _enableThunderSecurity(true) // Thunder Security is enabled by Default.
                 , _configObserver(*this, server._config.PluginConfigPath())
                 , _compositPlugins()
             {
-                if (server._config.PluginConfigPath().empty() == true) {
+                // If RFC for Thunder Security is set to false, disable security.
+                getRFC("Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.ThunderSecurity.Enable",_enableThunderSecurity);
+
+                 if (server._config.PluginConfigPath().empty() == true) {
                     SYSLOG(Logging::Startup, (_T("Dynamic configs disabled.")));
                 } else if (_configObserver.IsValid() == false) {
                     SYSLOG(Logging::Startup, (_T("Dynamic configs failed. Can not observe: [%s]"), server._config.PluginConfigPath().c_str()));
@@ -2870,12 +2876,41 @@ POP_WARNING()
             }
 
         public:
+
+            inline bool getRFC(const string& name, bool& response)
+            {
+                bool retVal = false;
+
+                RFC_ParamData_t param = {};
+
+                WDMP_STATUS status = getRFCParameter(const_cast<char*>("WPEFramework"), name.c_str(), &param);
+                SYSLOG(Logging::Startup, (_T("name = %s, type = %d, value = %s"), param.name, param.type, param.value));
+
+                if (status == WDMP_SUCCESS)
+                {
+                    response = (strncmp(param.value, "true", strlen("true")) == 0);
+                    retVal = true;
+                }
+                else
+                {
+                    SYSLOG(Logging::Startup, (_T("getRFCParameter fail : %s"), getRFCErrorString(status)));
+                }
+
+
+                return retVal;
+            }
+
+            inline bool isThunderSecurityEnabled()
+            {
+                return _enableThunderSecurity;
+            }
+
             inline void Security(const bool enabled)
             {
                 _adminLock.Lock();
 
                 if ((_authenticationHandler == nullptr) ^ (enabled == false)) {
-                    if (_authenticationHandler == nullptr) {
+                    if ((_authenticationHandler == nullptr) && _enableThunderSecurity) {
                         // Let get the AuthentcationHandler.
                         _authenticationHandler = reinterpret_cast<IAuthenticate*>(QueryInterfaceByCallsign(IAuthenticate::ID, _subSystems.SecurityCallsign()));
                     } else {
@@ -3456,6 +3491,7 @@ POP_WARNING()
             CommunicatorServer _processAdministrator;
             Core::Sink<SubSystems> _subSystems;
             IAuthenticate* _authenticationHandler;
+            bool _enableThunderSecurity;
             ConfigObserver _configObserver;
             CompositPlugins _compositPlugins;
         };
@@ -4035,8 +4071,19 @@ POP_WARNING()
                     break;
                 }
                 case Request::UNAUTHORIZED: {
-                    // Report that we, at least, need a call sign.
-                    Submit(_unauthorizedRequest);
+                   // Report that request is unauthorized.
+                    Core::ProxyType<Web::Response> response = IFactories::Instance().Response();
+                    Core::ProxyType<Core::JSONRPC::Message> body(Core::ProxyType<Core::JSONRPC::Message>(IFactories::Instance().JSONRPC()));
+
+                    Core::ProxyType<Core::JSONRPC::Message> message(request->Body<Core::JSONRPC::Message>());
+                    if(message.IsValid())
+                        body->Id = message->Id;
+
+                    body->JSONRPC = Core::JSONRPC::Message::DefaultVersion;
+                    body->Error.SetError(Core::ERROR_PRIVILIGED_REQUEST);
+                    body->Error.Text = _T("Request needs authorization. Missing or invalid token.");
+                    response->Body(body);
+                    Submit(response);
                     break;
                 }
                 case Request::COMPLETE: {
@@ -4122,10 +4169,9 @@ POP_WARNING()
                         PluginHost::Channel::Unlock();
 
                         if (securityClearance == false) {
-                            // Oopsie daisy we are not allowed to handle this request.
-                            // TODO: How shall we report back on this?
+                            SYSLOG(Logging::Startup, (_T("Security failed, incoming request is not authorized.")));
                             message->Error.SetError(Core::ERROR_PRIVILIGED_REQUEST);
-                            message->Error.Text = _T("method invokation not allowed.");
+                            message->Error.Text = _T("Request needs authorization. Missing or invalid token.");
                             Submit(Core::ProxyType<Core::JSON::IElement>(message));
                         }
                     }
diff --git a/cmake/modules/FindRFC.cmake b/cmake/modules/FindRFC.cmake
new file mode 100644
index 00000000..57426f59
--- /dev/null
+++ b/cmake/modules/FindRFC.cmake
@@ -0,0 +1,23 @@
+# - Try to find RFC components
+# Once done this will define
+#  RFC_FOUND - System has RFC
+#  RFC_LIBRARIES - The libraries needed to use  RFC
+#  RFC_INCLUDE_DIRS - The headers needed to use RFC
+
+find_package(PkgConfig)
+
+find_library(RFC_LIBRARIES NAMES rfcapi)
+find_path(RFC_INCLUDE_DIRS NAMES rfcapi.h )
+find_path(WDMP_INCLUDE_DIRS NAMES wdmp-c.h PATH_SUFFIXES wdmp-c)
+
+set(RFC_INCLUDE_DIRS ${RFC_INCLUDE_DIRS} ${WDMP_INCLUDE_DIRS} )
+set(RFC_INCLUDE_DIRS ${RFC_INCLUDE_DIRS} ${WDMP_INCLUDE_DIRS} CACHE PATH "Path to RFC include")
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(RFC DEFAULT_MSG RFC_INCLUDE_DIRS RFC_LIBRARIES)
+
+mark_as_advanced(
+    RFC_FOUND
+    RFC_INCLUDE_DIRS
+    RFC_LIBRARIES)
+
