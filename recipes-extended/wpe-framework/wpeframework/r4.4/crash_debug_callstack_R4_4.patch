Date: Jun 26 12:05:37 2024
From: K, Sethulakshmi
Subject: To debug callback crash
Upstream-Status: Pending
Signed-off-by: K, Sethulakshmi (Business Partner) <ssk@synamedia.com>
---
diff --git a/Source/WPEFramework/PluginHost.cpp b/Source/WPEFramework/PluginHost.cpp
index 213da58d..cc1c7ee4 100644
--- a/Source/WPEFramework/PluginHost.cpp
+++ b/Source/WPEFramework/PluginHost.cpp
@@ -18,6 +18,8 @@
  */
 
 #include "PluginServer.h"
+#include "core/Library.h"
+
 #include <fstream>
 
 #ifndef __WINDOWS__
@@ -251,6 +253,7 @@ POP_WARNING()
                 fflush(stderr);
             }
             _atExitActive = false;
+            exit(0);
         }
 
     private:
@@ -264,8 +267,9 @@ POP_WARNING()
     Core::CriticalSection ExitHandler::_adminLock;
     
     #ifndef __WINDOWS__
-    struct sigaction _originalSegmentationHandler;
-    struct sigaction _originalAbortHandler;
+    static struct sigaction _originalSegmentationHandler;
+    static struct sigaction _originalAbortHandler;
+    static Core::CriticalSection _adminLock;
     #endif
 
     static string GetDeviceId(PluginHost::Server* dispatcher)
@@ -300,6 +304,7 @@ POP_WARNING()
 
     void ExitDaemonHandler(int signo)
     {
+        const char* segname = "";
         if (_background) {
             syslog(LOG_NOTICE, "Signal received %d. in process [%d]", signo, getpid());
         } else {
@@ -327,21 +332,64 @@ POP_WARNING()
 
 
             ExitHandler::DumpMetadata();
+            segname = (signo == SIGSEGV) ? "a segmentation fault" : (signo == SIGABRT) ? "an abort" : "";
 
             if (_background) {
-                syslog(LOG_NOTICE, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to a segmentation fault. All relevant data dumped");
+                syslog(LOG_NOTICE, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to %s signal. All relevant data dumped", segname);
             } else {
-                fprintf(stderr, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to a segmentation fault. All relevant data dumped\n");
+                fprintf(stderr, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to %s signal. All relevant data dumped\n", segname);
                 fflush(stderr);
             }
 
-            ExitHandler::StartShutdown();
+            raise(signo);
         }
         else if (signo == SIGUSR1) {
             ExitHandler::DumpMetadata();
         }
     }
 
+    static void SetupCrashHandler(void)
+    {
+        _adminLock.Lock();
+        struct sigaction sa, current_sa;
+
+        memset(&current_sa, 0, sizeof(struct sigaction));
+        sigaction(SIGSEGV, nullptr, &current_sa);
+        if (ExitDaemonHandler  != current_sa.sa_handler)
+        {
+            _originalSegmentationHandler = current_sa;
+             memset(&sa, 0, sizeof(struct sigaction));
+             sigemptyset(&sa.sa_mask);
+             sa.sa_handler = ExitDaemonHandler;
+             sa.sa_flags = 0;
+             if (_background) {
+                 syslog(LOG_NOTICE, "Registering ExitDaemonHandler = %p for SIGSEGV & Previous Handler = %p", (void*)ExitDaemonHandler, (void*)current_sa.sa_handler);
+             } else {
+                 fprintf(stdout, "Registering ExitDaemonHandler = %p for SIGSEGV & Previous Handler = %p \n", (void*)ExitDaemonHandler, (void*)current_sa.sa_handler);
+                 fflush(stdout);
+             }
+             sigaction(SIGSEGV, &sa, nullptr);
+        }
+
+        memset(&current_sa, 0, sizeof(struct sigaction));
+        sigaction(SIGABRT, nullptr, &current_sa);
+        if (ExitDaemonHandler  != current_sa.sa_handler)
+        {
+            _originalAbortHandler = current_sa;
+             memset(&sa, 0, sizeof(struct sigaction));
+             sigemptyset(&sa.sa_mask);
+             sa.sa_handler = ExitDaemonHandler;
+             sa.sa_flags = 0;
+             if (_background) {
+                 syslog(LOG_NOTICE, "Registering ExitDaemonHandler = %p for SIGABRT & Previous Handler = %p", (void*)ExitDaemonHandler, (void*)current_sa.sa_handler);
+             } else {
+                 fprintf(stdout, "Registering ExitDaemonHandler = %p for SIGABRT & Previous Handler = %p \n", (void*)ExitDaemonHandler, (void*)current_sa.sa_handler);
+                 fflush(stdout);
+             }
+             sigaction(SIGABRT, &sa, nullptr);
+        }
+        _adminLock.Unlock();
+    }
 #endif
 
     void LoadPlugins(const string& name, PluginHost::Config& config)
@@ -444,6 +492,7 @@ POP_WARNING()
 #endif
 
         ConsoleOptions options(argc, argv);
+        WPEFramework::Core::Library::RegisterLibraryLoadCallback(SetupCrashHandler);
 
         if (options.RequestUsage()) {
 #ifndef __WINDOWS__
diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index 317be4fd..092257a6 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -4464,6 +4464,12 @@ POP_WARNING()
                 std::list<Core::callstack_info> stackList;
 
                 ::DumpCallStack(static_cast<ThreadId>(index.Current().Id.Value()), stackList);
+                for(const Core::callstack_info& entry : stackList)
+                {
+                    std::string symbol = entry.function.empty() ? "Unknown symbol" : entry.function;
+                    fprintf(stderr, "[%s]:[%s]:[%d]:[%p]\n",entry.module.c_str(), symbol.c_str(),entry.line,entry.address);
+                }
+                fflush(stderr);
 
                 PostMortemData::Callstack dump;
                 dump.Id = index.Current().Id.Value();
diff --git a/Source/core/Library.cpp b/Source/core/Library.cpp
index eb294b7d..00ee2e1f 100644
--- a/Source/core/Library.cpp
+++ b/Source/core/Library.cpp
@@ -28,6 +28,15 @@
 namespace WPEFramework {
 namespace Core {
 
+    Library::LibraryLoadCallback Library::g_loadCallback = nullptr;
+
+    void Library::RegisterLibraryLoadCallback(LibraryLoadCallback callback)
+    {
+       assert(callback != nullptr);
+       assert(g_loadCallback == nullptr);
+       g_loadCallback = callback;
+    }
+
     Library::Library()
         : _refCountedHandle(nullptr)
         , _error()
@@ -88,8 +97,15 @@ namespace Core {
             _refCountedHandle->_referenceCount = 1;
             _refCountedHandle->_handle = handle;
             _refCountedHandle->_name = fileName;
-            TRACE_L1("Loaded library: %s", fileName);
-        } else {
+            TRACE_L1("Loaded library: %s\n", fileName);
+
+            // Trigger the callback to notify that a library has been loaded
+            if (g_loadCallback)
+            {
+               g_loadCallback();
+            }
+
+       } else {
 #ifdef __LINUX__
             _error = dlerror();
             TRACE_L1("Failed to load library: %s, error %s", fileName, _error.c_str());
diff --git a/Source/core/Library.h b/Source/core/Library.h
index 9ef11280..13ee18cd 100644
--- a/Source/core/Library.h
+++ b/Source/core/Library.h
@@ -42,6 +42,8 @@ namespace Core {
         typedef void (*ModuleUnload)();
 
     public:
+        typedef void (*LibraryLoadCallback)();
+        static void RegisterLibraryLoadCallback(LibraryLoadCallback callback);
         Library();
         Library(const void* functionInLibrary);
         Library(const TCHAR fileName[]);
@@ -75,6 +77,7 @@ namespace Core {
     private:
         RefCountedHandle* _refCountedHandle;
         string _error;
+        static LibraryLoadCallback g_loadCallback;
     };
 }
 } // namespace Core
