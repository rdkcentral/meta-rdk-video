From: Thamim Razith <tabbas651@cable.comcast.com>
Date: Thu, 14 Aug 2025 11:58:11 +0000
Subject: [PATCH] Integrated deactivate function in PLuginactivator
Upstream-Status: Pending
Signed-off-by: Thamim razith Abbas ali <tabbas651@cable.comcast.com>
------------------------------------------------------------------
Index: git/Utils/PluginActivator/source/COMRPCStarter.h
===================================================================
--- git.orig/Utils/PluginActivator/source/COMRPCStarter.h
+++ git/Utils/PluginActivator/source/COMRPCStarter.h
@@ -35,6 +35,7 @@ public:
     ~COMRPCStarter() override;

     bool activatePlugin(const uint8_t maxRetries, const uint16_t retryDelayMs) override;
+    bool deactivatePlugin(const uint8_t maxRetries, const uint16_t retryDelayMs) override;
     
 private:
     using ControllerConnector = RPC::SmartControllerInterfaceType<Exchange::Controller::ILifeTime>;
@@ -42,4 +43,4 @@ private:
 private:
     ControllerConnector _connector;
     const string _pluginName;
-};
\ No newline at end of file
+};
Index: git/Utils/PluginActivator/source/IPluginStarter.h
===================================================================
--- git.orig/Utils/PluginActivator/source/IPluginStarter.h
+++ git/Utils/PluginActivator/source/IPluginStarter.h
@@ -40,4 +40,5 @@ public:
      * @param[in]   retryDelayMs        Amount of time to wait after a failed activation before retrying again
      */
     virtual bool activatePlugin(const uint8_t maxRetries, const uint16_t retryDelayMs) = 0;
-};
\ No newline at end of file
+    virtual bool deactivatePlugin(const uint8_t maxRetries, const uint16_t retryDelayMs) = 0;
+};
Index: git/Utils/PluginActivator/source/COMRPCStarter.cpp
===================================================================
--- git.orig/Utils/PluginActivator/source/COMRPCStarter.cpp
+++ git/Utils/PluginActivator/source/COMRPCStarter.cpp
@@ -108,3 +108,57 @@ bool COMRPCStarter::activatePlugin(const uint8_t maxRetries, const uint16_t retr

     return success;
 }
+
+bool COMRPCStarter::deactivatePlugin(const uint8_t maxRetries, const uint16_t retryDelayMs)
+{
+    bool success = false;
+    int currentRetry = 1;
+
+    while (!success && currentRetry <= maxRetries) {
+        LOG_INF(_pluginName.c_str(), "Attempting to deactivate plugin - attempt %d/%d", currentRetry, maxRetries);
+
+        auto start = Core::Time::Now();
+
+        if (_connector.IsOperational() == false) {
+            uint32_t result = _connector.Open(RPC::CommunicationTimeOut, ControllerConnector::Connector());
+            if(result != Core::ERROR_NONE) {
+                LOG_ERROR(_pluginName.c_str(), "Failed to get controller interface, error %u (%s)", result, Core::ErrorToString(result));
+            }
+        }
+
+        Exchange::Controller::ILifeTime* lifetime = _connector.Interface();
+
+        if (lifetime == nullptr) {
+            LOG_ERROR(_pluginName.c_str(), "Failed to open ILifeTime interface" );
+            currentRetry++;
+
+            _connector.Close(RPC::CommunicationTimeOut);
+
+            std::this_thread::sleep_for(std::chrono::milliseconds(retryDelayMs));
+        } else {
+            uint32_t result = lifetime->Deactivate(_pluginName.c_str());
+
+            auto duration = Core::Time::Now().Sub(start.MilliSeconds());
+
+            if (result != Core::ERROR_NONE) {
+                LOG_ERROR(_pluginName.c_str(), "Failed to deactivate plugin with error %u (%s) after %dms", result, Core::ErrorToString(result), duration.MilliSeconds());
+                currentRetry++;
+                std::this_thread::sleep_for(std::chrono::milliseconds(retryDelayMs));
+            } else {
+                LOG_INF(_pluginName.c_str(), "Successfully deactivated plugin after %dms", duration.MilliSeconds());
+                success = true;
+            }
+            lifetime->Release();
+        }
+    }
+
+    if (!success) {
+        LOG_ERROR(_pluginName.c_str(), "Max retries hit - giving up deactivating the plugin");
+    }
+
+    if (_connector.IsOperational() == true) {
+        _connector.Close(RPC::CommunicationTimeOut);
+    }
+
+    return success;
+}
Index: git/Utils/PluginActivator/source/main.cpp
===================================================================
--- git.orig/Utils/PluginActivator/source/main.cpp
+++ git/Utils/PluginActivator/source/main.cpp
@@ -26,6 +26,8 @@ static int gRetryCount = 100;
 static int gRetryDelayMs = 500;
 static string gPluginName;

+static bool gDeactivate = false;
+
 /**
  * @brief Display a help message for the tool
  */
@@ -36,6 +38,7 @@ static void displayUsage()
     printf("    -h, --help          Print this help and exit\n");
     printf("    -r, --retries       Maximum amount of retries to attempt to start the plugin before giving up\n");
     printf("    -d, --delay         Delay (in ms) between each attempt to start the plugin if it fails\n");
+    printf("    -x, --deactivate    Deactivate the plugin instead of activating\n");
     printf("\n");
     printf("    [callsign]          Callsign of the plugin to activate (Required)\n");
 }
@@ -57,6 +60,7 @@ static void parseArgs(const int argc, char** argv)
         { "help", no_argument, nullptr, (int)'h' },
         { "retries", required_argument, nullptr, (int)'r' },
         { "delay", required_argument, nullptr, (int)'d' },
+        { "deactivate", no_argument, nullptr, (int)'x' },
         { nullptr, 0, nullptr, 0 }
     };

@@ -85,6 +89,9 @@ static void parseArgs(const int argc, char** argv)
                 exit(EXIT_FAILURE);
             }
             break;
+        case 'x':
+            gDeactivate = true;
+            break;
         case '?':
             if (optopt == 'c')
                 fprintf(stderr, "Warning: Option -%c requires an argument.\n", optopt);
@@ -122,11 +129,16 @@ int main(int argc, char* argv[])
     // in the future
     bool success;
     std::unique_ptr<IPluginStarter> starter(new COMRPCStarter(gPluginName));
-    success = starter->activatePlugin(gRetryCount, gRetryDelayMs);
+    // Explicitly check for deactivate or activate
+    if (gDeactivate) {
+        success = starter->deactivatePlugin(gRetryCount, gRetryDelayMs);
+    } else {
+        success = starter->activatePlugin(gRetryCount, gRetryDelayMs);
+    }

     // Destruct the COM-RPC starter so it cleans up after itself before we dispose WPEFramework singletons
     starter.reset();
     Core::Singleton::Dispose();

     return success ? EXIT_SUCCESS : EXIT_FAILURE;
-}
\ No newline at end of file
+}
