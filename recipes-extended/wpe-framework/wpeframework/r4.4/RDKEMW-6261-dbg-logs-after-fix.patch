diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 7279580e3..0b2e6e5ae 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -505,7 +505,7 @@ namespace PluginHost
     /* virtual */ Core::hresult Server::Service::Deactivate(const reason why)
     {
         Core::hresult result = Core::ERROR_NONE;
-
+        char* callsign;
         Lock();
 
         IShell::state currentState(State());
@@ -519,7 +519,8 @@ namespace PluginHost
 
             const string className(PluginHost::Service::Configuration().ClassName.Value());
             const string callSign(PluginHost::Service::Configuration().Callsign.Value());
-
+            callsign = const_cast<char*>(callSign.c_str());
+            fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate Enter Acquired lock callsign: %s tid: %d\n", callsign, gettid());
             _reason = why;
 
             if(currentState == IShell::state::HIBERNATED)
@@ -541,6 +542,7 @@ namespace PluginHost
 
                 if (currentState == IShell::ACTIVATED) {
                     TRACE(Activity, (_T("Deactivating plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
+                    fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate calling _administrator.Deactivated callsign: %s tid: %d\n", callsign, gettid());
                     _administrator.Deactivated(callSign, this);
                 }
 
@@ -552,12 +554,13 @@ namespace PluginHost
                 if ((PluginHost::Service::Configuration().WebUI.IsSet()) || (PluginHost::Service::Configuration().WebUI.Value().empty() == false)) {
                     DisableWebServer();
                 }
-
+                fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate calling plugin's Deinitialize callsign: %s tid: %d\n", callsign, gettid());
                 REPORT_DURATION_WARNING( { _handler->Deinitialize(this); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::DEACTIVATION, callSign.c_str());
 
                 Lock();
 
                 if (_jsonrpc != nullptr) {
+                    fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate calling _jsonrpc->Deactivate callsign: %s tid: %d\n", callsign, gettid());
                     _jsonrpc->Deactivate();
                 }
                 if (_external.Connector().empty() == false) {
@@ -573,22 +576,23 @@ namespace PluginHost
 #if THUNDER_RESTFULL_API
                 _administrator.Notification(_T("{\"callsign\":\"") + callSign + _T("\",\"state\":\"deactivated\",\"reason\":\"") + textReason.Data() + _T("\"}"));
 #endif
-
+                fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate calling _administrator.Notification callsign: %s tid: %d\n", callsign, gettid());
                 _administrator.Notification(PluginHost::Server::ForwardMessage(callSign, string(_T("{\"state\":\"deactivated\",\"reason\":\"")) + textReason.Data() + _T("\"}")));
 
             }
 
             State(why == CONDITIONS ? PRECONDITION : DEACTIVATED);
-
+            fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate calling _administrator.Deinitialized callsign: %s tid: %d\n", callsign, gettid());
             _administrator.Deinitialized(callSign, this);
 
             // We have no need for his module anymore..
+            fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate calling ReleaseInterfaces callsign: %s tid: %d\n", callsign, gettid());
             ReleaseInterfaces();
         }
 
 
         Unlock();
-
+        fprintf(stderr, "bvanav-dbg: PluginServer.cpp Server::Service::Deactivate Return Release lock callsign: %s tid: %d\n", callsign, gettid());
         return (result);
     }
 
diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index e24ce0572..538fd6ebf 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -2968,33 +2968,43 @@ POP_WARNING()
             }
             void Deactivated(const string& callsign, PluginHost::IShell* entry)
             {
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deactivated Enter before notf. lock callsign: %s tid: %d\n", callsign.c_str(), gettid());
                 _notificationLock.Lock();
-
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deactivated Enter acquired notf. lock callsign: %s tid: %d\n", callsign.c_str(), gettid());
                 Notifiers::iterator index(_notifiers.begin());
 
+                int count = 1;
                 while (index != _notifiers.end()) {
+                    fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deactivated count: %d callsign: %s typeid(*(*index)): <addr: %p> %s->Deactivated() tid: %d\n", count, callsign.c_str(), *index, typeid(*(*index)).name(), gettid());
                     (*index)->Deactivated(callsign, entry);
                     index++;
                 }
 
                 _notificationLock.Unlock();
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deactivated Return release notf. lock callsign: %s tid: %d\n", callsign.c_str(), gettid());
             }
             void Deinitialized(const string& callsign, PluginHost::IShell* entry)
             {
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deinitialized Enter before notf. lock callsign: %s tid: %d\n", callsign.c_str(), gettid());
                 _notificationLock.Lock();
 
                 Notifiers::iterator index(_notifiers.begin());
 
+                int count = 1;
                 while (index != _notifiers.end()) {
+                    fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deinitialized count: %d typeid(*(*index)): <addr: %p> %s callsign: %s calling index->QueryInterfacecallsign tid: %d\n", count, *index, typeid(*(*index)).name(), callsign.c_str(), gettid());
                     PluginHost::IPlugin::ILifeTime* lifetime = (*index)->QueryInterface<PluginHost::IPlugin::ILifeTime>();
                     if (lifetime != nullptr) {
+                        fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deinitialized count: %d callsign: %s typeid(*(*index)): %s calling lifetime->Deinitialized()\n", count, callsign.c_str(), typeid(*(*index)).name());
                         lifetime->Deinitialized(callsign, entry);
+                        fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deinitialized count: %d callsign: %s typeid(*(*index)): %s calling lifetime->Release()\n", count, callsign.c_str(), typeid(*(*index)).name());
                         lifetime->Release();
                     }
                     index++;
                 }
 
                 _notificationLock.Unlock();
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Deinitialized Return release notf. lock callsign: %s tid: %d\n", callsign.c_str(), gettid());
             }
             void Unavailable(const string& callsign, PluginHost::IShell* entry)
             {
@@ -3016,6 +3026,9 @@ POP_WARNING()
                 ASSERT(std::find(_notifiers.begin(), _notifiers.end(), sink) == _notifiers.end());
 
                 sink->AddRef();
+                static int count = 1;
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Register calling _notifiers.push_back count: %d typeid(*sink): <addr: %p> %s pid: %d\n", count, sink, typeid(*sink).name(), getpid());
+                count++;
                 _notifiers.push_back(sink);
 
                 // Tell this "new" sink all our actived plugins..
@@ -3045,16 +3058,21 @@ POP_WARNING()
             }
             void Unregister(const PluginHost::IPlugin::INotification* sink)
             {
+                static int count = 1;
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Unregister Enter before notf. lock count: %d typeid(*sink): <addr: %p> %s tid: %d\n", count, sink, typeid(*sink).name(), gettid());
                 _notificationLock.Lock();
-
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Unregister Enter acquired notf. lock count: %d typeid(*sink): <addr: %p> %s tid: %d\n", count, sink, typeid(*sink).name(), gettid());
                 Notifiers::iterator index(std::find(_notifiers.begin(), _notifiers.end(), sink));
 
                 if (index != _notifiers.end()) {
                     (*index)->Release();
+                    fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Unregister Erase count: %d typeid(*sink): <addr: %p> %s tid: %d\n", count, sink, typeid(*sink).name(), gettid());
                     _notifiers.erase(index);
                 }
-
+                count++;
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Unregister Return before release notf. lock count: %d typeid(*sink): <addr: %p> %s tid: %d\n", count, sink, typeid(*sink).name(), gettid());
                 _notificationLock.Unlock();
+                fprintf(stderr, "bvanav-dbg: PluginServer.h PluginHost::Server::ServiceMap::Unregister Return after release notf. lock count: %d typeid(*sink): <addr: %p> %s tid: %d\n", count, sink, typeid(*sink).name(), gettid());
             }
             inline void* QueryInterfaceByCallsign(const uint32_t id, const string& name)
             {
diff --git a/Source/com/IUnknown.h b/Source/com/IUnknown.h
index debde5808..a40721d4f 100644
--- a/Source/com/IUnknown.h
+++ b/Source/com/IUnknown.h
@@ -131,6 +131,26 @@ namespace ProxyStub {
             CACHING_RELEASE  = 0x02
         };
 
+    public:
+        class WatchDog {    
+            public:
+            uint64_t Timed(const uint64_t /* scheduledTime */) {
+                fprintf(stderr, "bvanav-dbg: Watch Dog Timed Out for COM-RPC Proxy Invoke, Crashing Thunder...\n");
+                abort();
+            }
+        
+            bool operator==(const WatchDog& rhs) const
+            {
+                return true;
+            }
+        
+            bool operator!=(const WatchDog& rhs) const
+            {
+                return (!operator==(rhs));
+            }
+        
+        };
+
     public:
         UnknownProxy() = delete;
         UnknownProxy(UnknownProxy&&) = delete;
@@ -147,7 +167,21 @@ namespace ProxyStub {
             , _parent(parent)
             , _channel(channel)
             , _remoteReferences(1)
+            , _watchDogTimer(Core::Thread::DefaultStackSize(), _T("WatchDogTimer"))
         {
+            char path[40], process_name[256]; FILE *fp;
+            char self_name[] = "WPEFramework";
+            snprintf(path, sizeof(path), "/proc/%d/comm", getpid());
+            fp = fopen(path, "r");
+            if (fp == NULL)
+                fprintf(stderr, "bvanav-dbg: IUnknown.h UnknownProxy ctor Error opening pid file \n");
+            if (fgets(process_name, sizeof(process_name), fp) != NULL) {
+                if(strncmp(process_name, self_name, 5) == 0)
+                    isThunder = true;
+                else
+                    isThunder = false;
+            }
+            fclose(fp);
         }
         virtual ~UnknownProxy() = default;
 
@@ -322,11 +356,23 @@ namespace ProxyStub {
             _adminLock.Unlock();
 		
             if (channel.IsValid() == true) {
+                WatchDog _callback = WatchDog();
+                if(isThunder && 0x0022 == message->Parameters().InterfaceId() && 4 == message->Parameters().MethodId()) {
+                    fprintf(stderr, "bvanav-dbg: IUnknown.h ProxyStub::UnknownProxy::Invoke before channel invoke of IPlugin::INotification impl: 0x%x methodId: %d tid: %d and Scheduling watch dog...\n", message->Parameters().Implementation(), message->Parameters().MethodId(), gettid());
+                    Core::Time cutOffTime = Core::Time::Now();
+                    cutOffTime.Add(18000);
+                    _watchDogTimer.Schedule(cutOffTime, _callback);
+                }
 	            result = channel->Invoke(message, waitTime);
-	
+                
+                if(isThunder && 0x0022 == message->Parameters().InterfaceId() && 4 == message->Parameters().MethodId()) {
+                    fprintf(stderr, "bvanav-dbg: IUnknown.h ProxyStub::UnknownProxy::Invoke after channel invoke of IPlugin::INotification impl: 0x%x methodId: %d result: %d tid: %d and Revoking watch dog...\n", message->Parameters().Implementation(), message->Parameters().MethodId(), result, gettid());
+                    _watchDogTimer.Revoke(_callback);
+                }
 	            if (result != Core::ERROR_NONE) {
 	                result |= COM_ERROR;
-	
+                    if(isThunder && 0x0022 == message->Parameters().InterfaceId() && 4 == message->Parameters().MethodId())
+                        fprintf(stderr, "bvanav-dbg: IUnknown.h ProxyStub::UnknownProxy::Invoke Error IPlugin::INotification impl: 0x%x methodId: %d result: %d tid: %d\n", message->Parameters().Implementation(), message->Parameters().MethodId(), result, gettid());
 	                // Oops something failed on the communication. Report it.
 	                TRACE_L1("IPC method invocation failed for 0x%X, error: %d", message->Parameters().InterfaceId(), result);
 	            }
@@ -446,6 +492,9 @@ namespace ProxyStub {
         Core::IUnknown& _parent;
         mutable Core::ProxyType<Core::IPCChannel> _channel;
         uint32_t _remoteReferences;
+        bool isThunder;
+        Core::Time cutOffTime;
+        mutable Core::TimerType<WatchDog> _watchDogTimer;
     };
 
     template <typename INTERFACE>
diff --git a/Source/plugins/Types.h b/Source/plugins/Types.h
index 109484bba..8a4f878a5 100644
--- a/Source/plugins/Types.h
+++ b/Source/plugins/Types.h
@@ -22,6 +22,8 @@
 
 #include "IPlugin.h"
 #include "IShell.h"
+#include <pthread.h>
+#include <unistd.h>
 
 namespace WPEFramework {
 namespace PluginHost {
@@ -49,6 +51,15 @@ namespace PluginHost {
                 , _callsign()
                 , _designated(nullptr)
             {
+               char path[40], process_name[256]; FILE *fp;
+               snprintf(path, sizeof(path), "/proc/%d/comm", getpid());
+               fp = fopen(path, "r");
+               if (fp == NULL)
+                   fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Register Error opening pid file sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
+               if (fgets(process_name, sizeof(process_name), fp) != NULL)
+                   process_name[strcspn(process_name, "\n")] = '\0';
+               fclose(fp);
+               fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Register sink_addr: %p pid: %d process_name: %s tid: %lu\n", this, getpid(), process_name, pthread_self());
             }
             ~Sink() override = default;
 
@@ -63,7 +74,7 @@ namespace PluginHost {
                 _callsign = callsign;
                 _state = state::REGISTRING;
                 _adminLock.Unlock();
-
+                
                 controller->Register(this);
 
                 _adminLock.Lock();
@@ -83,9 +94,11 @@ namespace PluginHost {
             }
             void Unregister(IShell* controller)
             {
+                fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Unregister before acquiring lock sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
                 _adminLock.Lock();
-
+                fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Unregister after acquiring lock calling controller->Unregister sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
                 controller->Unregister(this);
+                fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Unregister after acquiring lock return from controller->Unregister sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
                 _callsign.clear();
 
                 if (_designated != nullptr) {
@@ -97,6 +110,7 @@ namespace PluginHost {
                 }
 
                 _adminLock.Unlock();
+                fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Unregister return sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
             }
             INTERFACE* Interface()
             {
@@ -153,9 +167,11 @@ namespace PluginHost {
             }
             void Deactivated(const string& name, PluginHost::IShell* plugin) override
             {
+                fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Deactivated Enter before admin lock sink_addr: %p pid: %d tid: %lu name: %s callsign: %s\n", this, getpid(), pthread_self(), name.c_str(), _callsign.c_str());
                 if (_callsign == name) {
 
                     _adminLock.Lock();
+                    fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Deactivated Enter after admin lock sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
                     if (_designated != nullptr) {
 
                         _designated->Release();
@@ -164,11 +180,14 @@ namespace PluginHost {
                         if (_state != state::RUNNING) {
                             _state = state::REGISTRING;
                         } else {
+                            fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Deactivated calling _parent.Deactivated sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
                             _parent.Deactivated();
                         }
                     }
                     _adminLock.Unlock();
+                    fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Deactivated after Return release admin lock sink_addr: %p pid: %d tid: %lu\n", this, getpid(), pthread_self());
                 }
+                fprintf(stderr, "bvanav-dbg: Types.h PluginMonitorType::Sink Deactivated Return sink_addr: %p pid: %d tid: %lu name: %s callsign: %s\n", this, getpid(), pthread_self(), name.c_str(), _callsign.c_str());
             }
             void Unavailable(const string& name, PluginHost::IShell* plugin) override
             {
@@ -251,6 +270,7 @@ PUSH_WARNING(DISABLE_WARNING_THIS_IN_MEMBER_INITIALIZER_LIST)
             , _monitor(*this)
             , _connectionId(~0)
         {
+            fprintf(stderr, "bvanav-dbg: Types.h RPC::SmartInterfaceType ctor pid: %d tid: %lu\n", getpid(), pthread_self());
         }
 POP_WARNING()
         virtual ~SmartInterfaceType()
