Index: git/Source/WPEFramework/PluginServer.h
===================================================================
--- git.orig/Source/WPEFramework/PluginServer.h
+++ git/Source/WPEFramework/PluginServer.h
@@ -2958,65 +2958,89 @@ POP_WARNING()
             {
                 return (reinterpret_cast<ISubSystem*>(_subSystems.QueryInterface(ISubSystem::ID)));
             }
-            void Initialize(const string& callsign, PluginHost::IShell* entry)
+           void Initialize(const string& callsign, PluginHost::IShell* entry)
             {
+                std::cout << "akshay at start ServiceMap::Initialize: " << callsign << std::endl;
                 _notificationLock.Lock();
 
                 Notifiers::iterator index(_notifiers.begin());
 
+                std::cout << "akshay before entering while loop ServiceMap::Initialize: " << callsign << std::endl;
                 while (index != _notifiers.end()) {
+                    std::cout << "akshay inside while loop and before QueryInterface call ServiceMap::Initialize: " << callsign << std::endl;
                     PluginHost::IPlugin::ILifeTime* lifetime = (*index)->QueryInterface<PluginHost::IPlugin::ILifeTime>();
+                    std::cout << "akshay after QueryInterface call ServiceMap::Initialize: " << callsign << std::endl;
                     if (lifetime != nullptr) {
+                        std::cout << "akshay inside if loop and before Initialize call ServiceMap::Initialize: " << callsign << std::endl;
                         lifetime->Initialize(callsign, entry);
+                        std::cout << "akshay after Initialize call ServiceMap::Initialize: if condition" << callsign << std::endl;
                         lifetime->Release();
+                        std::cout << "akshay after release call ServiceMap::Initialize: if condition" << callsign << std::endl;
                     }
                     index++;
                 }
-
+                std::cout << "akshay after while loop ServiceMap::Initialize: " << callsign << std::endl;
                 _notificationLock.Unlock();
+                std::cout << "akshay at end of ServiceMap::Initialize: " << callsign << std::endl;
             }
             void Activated(const string& callsign, PluginHost::IShell* entry)
             {
+                std::cout << "akshay at start ServiceMap::Activated: " << callsign << std::endl;
                 _notificationLock.Lock();
-
+                std::cout << "akshay after lock ServiceMap::Activated: " << callsign << std::endl;
                 Notifiers::iterator index(_notifiers.begin());
-
+                std::cout << "akshay before entering while loop ServiceMap::Activated: " << callsign << std::endl;
                 while (index != _notifiers.end()) {
+                    std::cout << "akshay inside while loop and before Activated call ServiceMap::Activated: " << callsign << std::endl;
                     (*index)->Activated(callsign, entry);
                     index++;
+                    std::cout << "akshay after Activated call ServiceMap::Activated: " << callsign << std::endl;
                 }
-
+                std::cout << "akshay exited while loop ServiceMap::Activated: " << callsign << std::endl;
                 _notificationLock.Unlock();
+                std::cout << "akshay at end of ServiceMap::Activated: " << callsign << std::endl;
             }
             void Deactivated(const string& callsign, PluginHost::IShell* entry)
             {
+                std::cout << "akshay at start ServiceMap::Deactivated: " << callsign << std::endl;
                 _notificationLock.Lock();
-
+                std::cout << "akshay after lock ServiceMap::Deactivated: " << callsign << std::endl;
                 Notifiers::iterator index(_notifiers.begin());
-
+                std::cout << "akshay before entering while loop ServiceMap::Deactivated: " << callsign << std::endl;
                 while (index != _notifiers.end()) {
+                    std::cout << "akshay inside while loop and before Deactivated call ServiceMap::Deactivated: " << callsign << std::endl;
                     (*index)->Deactivated(callsign, entry);
                     index++;
+                    _administrator.Activated(callSign, this);
                 }
+                std::cout << "akshay exited while loop ServiceMap::Deactivated: " << callsign << std::endl;
 
                 _notificationLock.Unlock();
+                std::cout << "akshay at end of ServiceMap::Deactivated: " << callsign << std::endl;
             }
             void Deinitialized(const string& callsign, PluginHost::IShell* entry)
             {
+                std::cout << "akshay at start ServiceMap::Deinitialized: " << callsign << std::endl;
                 _notificationLock.Lock();
-
+                std::cout << "akshay after lock ServiceMap::Deinitialized: " << callsign << std::endl;
                 Notifiers::iterator index(_notifiers.begin());
-
+                std::cout << "akshay before entering while loop ServiceMap::Deinitialized: " << callsign << std::endl;
                 while (index != _notifiers.end()) {
+                    std::cout << "akshay inside while loop and before QueryInterface call: " << callsign << std::endl;
                     PluginHost::IPlugin::ILifeTime* lifetime = (*index)->QueryInterface<PluginHost::IPlugin::ILifeTime>();
+                    std::cout << "akshay after QueryInterface call: " << callsign << std::endl;
                     if (lifetime != nullptr) {
+                        std::cout << "akshay inside if loop and before Deinitialized call: " << callsign << std::endl;
                         lifetime->Deinitialized(callsign, entry);
+                        std::cout << "akshay after Deinitialized call ServiceMap::Deinitialized: if condition" << callsign << std::endl;
                         lifetime->Release();
+                        std::cout << "akshay after release call ServiceMap::Deinitialized: if condition" << callsign << std::endl;
                     }
                     index++;
                 }
-
+                std::cout << "akshay exited while loop ServiceMap::Deinitialized: " << callsign << std::endl;
                 _notificationLock.Unlock();
+                std::cout << "akshay at end of ServiceMap::Deinitialized: " << callsign << std::endl;
             }
             void Unavailable(const string& callsign, PluginHost::IShell* entry)
             {
@@ -3033,18 +3057,22 @@ POP_WARNING()
             }
             void Register(PluginHost::IPlugin::INotification* sink)
             {
+                std::cout << "akshay at start ServiceMap::Register: " << sink->Callsign() << std::endl;
                 _notificationLock.Lock();
-
+                std::cout << "akshay after lock ServiceMap::Register: " << sink->Callsign() << std::endl;
                 ASSERT(std::find(_notifiers.begin(), _notifiers.end(), sink) == _notifiers.end());
 
                 sink->AddRef();
+                std::cout << "akshay after AddRef ServiceMap::Register: " << sink->Callsign() << std::endl;
                 _notifiers.push_back(sink);
+                std::cout << "akshay after push_back ServiceMap::Register: " << sink->Callsign() << std::endl;
 
                 // Tell this "new" sink all our actived plugins..
                 ServiceContainer::iterator index(_services.begin());
-
+                std::cout << "akshay before entering while loop ServiceMap::Register: " << sink->Callsign() << std::endl;
                 // Notifty all plugins that we have sofar..
                 while (index != _services.end()) {
+                    std::cout << "akshay inside while loop first ServiceMap::Register: " << sink->Callsign() << std::endl;
                     ASSERT(index->second.IsValid());
 
                     Core::ProxyType<Service> service(index->second);
@@ -3052,18 +3080,23 @@ POP_WARNING()
                     ASSERT(service.IsValid());
 
                     if ( (service.IsValid() == true) && (service->State() == IShell::ACTIVATED) ) {
+                        std::cout << "akshay inside if condition ServiceMap::Register: " << sink->Callsign() << std::endl;
                         sink->Activated(service->Callsign(), &(service.operator*()));
+                        std::cout << "akshay after Activated call ServiceMap::Register: " << sink->Callsign() << std::endl;
                     }
-
+                    std::cout << "akshay after if condition ServiceMap::Register: " << sink->Callsign() << std::endl;
                     index++;
                 }
                 for (Core::Sink<CompositPlugin>& entry : _compositPlugins) {
+                    std::cout << "akshay inside for loop ServiceMap::Register: " << sink->Callsign() << std::endl;
                     entry.Visit([&](const string& callsign, IShell* proxy) {
                         sink->Activated(callsign, proxy);
                     });
+                    std::cout << "akshay after Visit call ServiceMap::Register: " << sink->Callsign() << std::endl;
                 }
-
+                std::cout << "akshay before unlock ServiceMap::Register: " << sink->Callsign() << std::endl;
                 _notificationLock.Unlock();
+                std::cout << "akshay at end of ServiceMap::Register: and after unlock" << sink->Callsign() << std::endl;
             }
             void Unregister(const PluginHost::IPlugin::INotification* sink)
             {
