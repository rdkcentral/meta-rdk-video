From 6724126bb3352720359775fb9542c0b594b88d2f Mon Sep 17 00:00:00 2001
From: Pierre Wielders
Date: Wed, 20 Mar 2024 07:27:42 +0000

Subject: [PATCH] Refernce counted Library COMRPC objects,
Reason for Change:If COMRPC objects are created through the C interface, the object itself should hold on to a reference of the library
it is created from this way, the library will not be unloaded as long as there are still COMRPC object living which
reside in this SO. This PR makes sure that any instance instantiated through Core::ServiceType<COMRPCOBJECTIMPL> will
also grab a refenrence onto the SO it is located in. On deletion (Last reference release of the COMRPC object) this
reference on the SO will be dropped as well!

Upstream-Status: Upstreamed
Signed-off-by: Pierre Wielders  <Pierre_Wielders@comcast.com>
---
 Source/core/Library.cpp | 77 ++++++++++++++++++++++++++---------------
 Source/core/Library.h   |  1 +
 2 files changed, 50 insertions(+), 28 deletions(-)

diff --git a/Source/core/Library.cpp b/Source/core/Library.cpp
index eb294b7d..33b69604 100644
--- a/Source/core/Library.cpp
+++ b/Source/core/Library.cpp
@@ -33,10 +33,12 @@ namespace Core {
         , _error()
     {
     }
-    Library::Library(const void* functionInLibrary) {
-        TCHAR filename[512];
-
+    Library::Library(const void* functionInLibrary)
+        : _refCountedHandle(nullptr)
+        , _error() 
+    {
 #ifdef __WINDOWS__
+        TCHAR filename[256];
         HMODULE handle = nullptr;
         GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS |
             GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,
@@ -47,29 +49,43 @@ namespace Core {
 
             // Looks like we need to add a ref count by opening it..
             handle = ::LoadLibrary(filename);
+            if (handle != nullptr) {
+                // Seems we have an dynamic library opened..
+                _refCountedHandle = new RefCountedHandle;
+                _refCountedHandle->_referenceCount = 1;
+                _refCountedHandle->_handle = handle;
+                _refCountedHandle->_name = filename;
+
+                TRACE_L1("Took a reference on library: %s", filename);
+            }
         }
-#endif
-#ifdef __LINUX__
+        if (_refCountedHandle == nullptr) {
+            _error = "Loading library by address failed!";
+            TRACE_L1("Failed to load library: %p, error %s", functionInLibrary, _error.c_str());
+        }
+#else
         void* handle = nullptr;
         Dl_info info;
         if (dladdr(functionInLibrary, &info) != 0) {
-            _tcsncpy (filename, info.dli_fname, sizeof(filename) - 1);
-            handle = ::dlopen(filename, RTLD_NOLOAD);
+            handle = ::dlopen(info.dli_fname, RTLD_NOLOAD|RTLD_LAZY);
+            if (handle != nullptr) {
+                // Seems we have an dynamic library opened..
+                _refCountedHandle = new RefCountedHandle;
+                _refCountedHandle->_referenceCount = 1;
+                _refCountedHandle->_handle = handle;
+                _refCountedHandle->_name = info.dli_fname;
+
+                TRACE_L1("Took a reference on library: %s", info.dli_fname);
+            }
         }
-#endif
-        if (handle != nullptr) {
-            // Seems we have an dynamic library opened..
-            _refCountedHandle = new RefCountedHandle;
-            _refCountedHandle->_referenceCount = 1;
-            _refCountedHandle->_handle = handle;
-            _refCountedHandle->_name = filename;
+        if (_refCountedHandle == nullptr) {
+            const char* result = dlerror();
+            if (result != nullptr) {
+                _error = result;
+                TRACE_L1("Failed to load library: %p, error %s", functionInLibrary, _error.c_str());
+            }
         }
-        else {
-#ifdef __LINUX__
-            _error = dlerror();
-            TRACE_L1("Failed to load library: %s, error %s", filename, _error.c_str());
 #endif
-        }
     }
     Library::Library(const TCHAR fileName[])
         : _refCountedHandle(nullptr)
@@ -112,6 +128,19 @@ namespace Core {
         Release();
     }
 
+    Library& Library::operator=(Library&& RHS)
+    {
+        // Only do this if we have different libraries..
+        Release();
+
+        // Assigne the new handler
+        _refCountedHandle = RHS._refCountedHandle;
+        _error = RHS._error;
+        RHS._refCountedHandle = nullptr;
+
+        return (*this);
+    }
+
     Library& Library::operator=(const Library& RHS)
     {
         // Only do this if we have different libraries..
@@ -171,21 +200,13 @@ namespace Core {
         if (_refCountedHandle != nullptr) {
             ASSERT(_refCountedHandle->_referenceCount > 0);
             if (Core::InterlockedDecrement(_refCountedHandle->_referenceCount) == 0) {
-
-                ModuleUnload function = reinterpret_cast<ModuleUnload>(LoadFunction(_T("ModuleUnload")));
-
-                if (function != nullptr) {
-                    // Cleanup class
-                    function();
-                }
-
 #ifdef __LINUX__
                 dlclose(_refCountedHandle->_handle);
 #endif
 #ifdef __WINDOWS__
                 ::FreeLibrary(_refCountedHandle->_handle);
 #endif
-                TRACE_L1("Unloaded library: %s", _refCountedHandle->_name.c_str());
+                TRACE_L1("Dropping reference on library: %s", _refCountedHandle->_name.c_str());
                 delete _refCountedHandle;
             }
             _refCountedHandle = nullptr;
diff --git a/Source/core/Library.h b/Source/core/Library.h
index 9ef11280..8f26c13f 100644
--- a/Source/core/Library.h
+++ b/Source/core/Library.h
@@ -49,6 +49,7 @@ namespace Core {
         Library(const Library& copy);
         ~Library();
 
+        Library& operator=(Library&& RHS);
         Library& operator=(const Library& RHS);
 
     public:
