From f68a142b26140b331dc36244408afd58e1fd5ddc Mon Sep 17 00:00:00 2001
From: Adrian Muzyka <adrian.muzyka@consult.red>
Date: Fri, 12 Jul 2024 09:41:47 +0000
Subject: [PATCH] DELIA-65784: Hibernation fixes for R4.4

---
 Source/WPEFramework/CMakeLists.txt            |  5 +
 Source/WPEFramework/PluginServer.cpp          | 93 +++++++++++++------
 Source/WPEFramework/PluginServer.h            | 18 +++-
 9 files changed, 126 insertions(+), 43 deletions(-)

diff --git a/Source/WPEFramework/CMakeLists.txt b/Source/WPEFramework/CMakeLists.txt
index 1e439148c..0d681cf04 100644
--- a/Source/WPEFramework/CMakeLists.txt
+++ b/Source/WPEFramework/CMakeLists.txt
@@ -84,6 +84,7 @@ if (PROCESSCONTAINERS)
 endif(PROCESSCONTAINERS)

 if(HIBERNATESUPPORT)
+    option(HIBERNATESUPPORT_AUTOWAKEUP "Auto-wakeup for Hibernate" OFF)
     target_link_libraries(${TARGET} PRIVATE
         ${NAMESPACE}Hibernate::${NAMESPACE}Hibernate)
     target_compile_definitions(${TARGET} PUBLIC
diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 57a0f95a8..13fe9d59d 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -281,6 +281,14 @@ namespace PluginHost
     /* virtual */ void* Server::Service::QueryInterface(const uint32_t id)
     {
         void* result = nullptr;
+#ifdef HIBERNATE_SUPPORT_AUTOWAKEUP_ENABLED
+        Lock();
+        if(IsHibernated())
+        {
+            Wakeup();
+        }
+        Unlock();
+#endif
         if (id == Core::IUnknown::ID) {
             AddRef();
             result = static_cast<IUnknown*>(this);
@@ -336,7 +344,7 @@ namespace PluginHost
             Unlock();
             result = Core::ERROR_ILLEGAL_STATE;
         } else if (currentState == IShell::state::HIBERNATED) {
-            result = Wakeup(3000);
+            result = Wakeup();
             Unlock();
         } else if ((currentState == IShell::state::DEACTIVATED) || (currentState == IShell::state::PRECONDITION)) {

diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index a83a4967..e058f7ee 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -1442,12 +1442,16 @@ namespace PluginHost {
                 Core::ProxyType<Core::JSONRPC::Message> response;
 
                 Lock();
-
-                if ( (_jsonrpc == nullptr) || (IsActive() == false) ) {
+                if ( (_jsonrpc == nullptr) || (IsActive() == false
+#ifdef HIBERNATE_SUPPORT_AUTOWAKEUP_ENABLED
+                 && IsHibernated() == false
+#endif
+                 ) ) {
+                    bool isHibernated = IsHibernated();
                     Unlock();
 
                     response = Core::ProxyType<Core::JSONRPC::Message>(IFactories::Instance().JSONRPC());
-                    if(IsHibernated() == true)
+                    if(isHibernated)
                     {
                         response->Error.SetError(Core::ERROR_HIBERNATED);
                         response->Error.Text = _T("Service is hibernated");
@@ -1460,6 +1464,12 @@ namespace PluginHost {
                     response->Id = message.Id;
                 }
                 else {
+#ifdef HIBERNATE_SUPPORT_AUTOWAKEUP_ENABLED
+                    if (IsHibernated())
+                    {
+                        Wakeup();
+                    }
+#endif
                     Unlock();
 
 #if THUNDER_RUNTIME_STATISTICS
@@ -1801,7 +1811,7 @@ namespace PluginHost {
             }
 
         private:
-            uint32_t Wakeup(const uint32_t timeout);
+            uint32_t Wakeup(const uint32_t timeout = 10000 /*ms*/);
 #ifdef HIBERNATE_SUPPORT_ENABLED
             uint32_t HibernateChildren(const Core::process_t parentPID, const uint32_t timeout);
             uint32_t WakeupChildren(const Core::process_t parentPID, const uint32_t timeout);
