From: Gururaaja ESR
Date: Jan 4 09:51:57 2025
Subject: [PATCH]  Thunder hand recovery patch

Upstream-Status: Pending
Signed-off-by: Gururaaja ESR <Gururaja_ErodeSriranganRamlingham@comcast.com>
---
diff -ruapN a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt  2024-11-15 04:03:57.191292644 +0000
+++ b/CMakeLists.txt  2024-11-15 04:03:18.967683991 +0000
@@ -27,6 +27,8 @@ set(VERSION ${VERSION_MAJOR}.${VERSION_M

 message(STATUS "Setting up ${PROJECT_NAME} v${VERSION}")

+find_package(CURL REQUIRED)
+
 option(HIDE_NON_EXTERNAL_SYMBOLS
     "Hide all non EXTERNAL tagged symbols" ON)
 option(ENABLE_STRICT_COMPILER_SETTINGS
@@ -90,6 +92,8 @@ endif()
 string(REGEX REPLACE "-D_FORTIFY_SOURCE=[0-3]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
 string(REGEX REPLACE "-D_FORTIFY_SOURCE=[0-3]" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

+add_executable(thunderHangRecovery Source/thunderHangRecovery.cpp)
+target_link_libraries(thunderHangRecovery ${CURL_LIBRARIES})
 # make sure others can make use of the JSON creation tools as well!!!
 configure_file( "${CMAKE_SOURCE_DIR}/cmake/project.cmake.in"
                 "${CMAKE_CURRENT_BINARY_DIR}/${NAMESPACE}.cmake"
diff -ruapN a/Source/thunderHangRecovery.cpp b/Source/thunderHangRecovery.cpp
--- /dev/null                           1970-01-01 00:00:00.000000000 +0000
+++ b/Source/thunderHangRecovery.cpp    2024-11-15 03:47:32.013366697 +0000
@@ -0,0 +1,155 @@
+#include <iostream>
+#include <curl/curl.h>
+#include <unistd.h>
+#include <cstring>
+#include <string>
+#include <sstream>
+
+class CurlObject {
+    private:
+        CURL* m_curlHandle;
+        std::string m_curlDataBuffer;
+        long m_httpcode;
+
+    public:
+        CurlObject(const std::string& url, const std::string data, const struct curl_slist *headers);
+        ~CurlObject();
+        static int curlwritefunc(const char *data, size_t size, size_t nmemb, std::string *buffer);
+        std::string getCurlData();
+        long gethttpcode();
+};
+
+CurlObject::CurlObject(const std::string& url, const std::string data, const struct curl_slist *headers) {
+    CURLcode res;
+    char errbuf[CURL_ERROR_SIZE];
+    long httpCode;
+    m_curlHandle = curl_easy_init();
+    if (!m_curlHandle) {
+        std::cerr << "curl failed in init" << std::endl;
+    }
+
+    errbuf[0] = 0;
+
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_URL, url.c_str());
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_URL set failed with curl error " << res << std::endl;
+
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_TIMEOUT, 10L);  // Timeout for entire request (in seconds)
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_TIMEOUT set failed with curl error " << res << std::endl;
+
+    // Set headers
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_HTTPHEADER, headers);
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_URL set failed with curl error " << res << std::endl;
+
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_POSTFIELDS, data.c_str());
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_POSTFIELDS set failed with curl error " << res << std::endl;
+
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_ERRORBUFFER, errbuf);
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_ERRORBUFFER set failed with curl error " << res << std::endl;
+
+    errbuf[0] = 0;
+
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_WRITEFUNCTION, &CurlObject::curlwritefunc);
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_WRITEFUNCTION set failed with curl error " << res << std::endl;
+
+    res = curl_easy_setopt(m_curlHandle, CURLOPT_WRITEDATA, &m_curlDataBuffer);
+    if (CURLE_OK != res)
+        std::cerr << "CURLOPT_WRITEDATA set failed with curl error " << res << std::endl;
+
+    res = curl_easy_perform(m_curlHandle);
+    if (CURLE_OK != res) {
+        std::cerr << "curl failed with curl error " << res << std::endl;
+        size_t len = strlen(errbuf);
+        std::cerr << "\nlibcurl: (" << res << ") ";
+        if (len)
+            std::cerr << errbuf << ((errbuf[len - 1] != '\n') ? "\n" : "");
+        else
+            std::cerr << curl_easy_strerror(res) << std::endl;
+    }
+
+    res = curl_easy_getinfo(m_curlHandle, CURLINFO_RESPONSE_CODE, &httpCode);
+    if (CURLE_OK != res) {
+        std::cerr << "Failed to get response code" << std::endl;
+    }
+
+    if (httpCode != 200)
+        std::cerr << "curl failed with http error " << httpCode << std::endl;
+
+    m_httpcode = httpCode;
+    curl_easy_cleanup(m_curlHandle);
+}
+
+int CurlObject::curlwritefunc(const char *data, size_t size, size_t nmemb, std::string *buffer) {
+    int result = 0;
+    if (buffer != nullptr) {
+        buffer->append(data, size * nmemb);
+        result = size * nmemb;
+    } else {
+        std::cerr << "curl buffer NULL" << std::endl;
+    }
+    return result;
+}
+
+std::string CurlObject::getCurlData() {
+    std::cout << "Received data: " << m_curlDataBuffer << std::endl;
+    return m_curlDataBuffer;
+}
+
+long CurlObject::gethttpcode() {
+    return m_httpcode;
+}
+
+CurlObject::~CurlObject() {}
+
+int main() {
+
+    const std::string url = "http://127.0.0.1:9998/jsonrpc";
+    std::string jsonData;
+
+    struct curl_slist *headers = NULL;
+    headers = curl_slist_append(headers, "Content-Type: application/json");
+
+    unsigned int failureCount = 0;
+    unsigned int successCount = 0;
+    unsigned int iterationCount = 1;
+    unsigned int timer = 30;
+
+    sleep(180);
+    while (true) {
+        std::ostringstream oss;
+        oss << R"json({"jsonrpc": "2.0", "id": )json" << iterationCount << R"json(, "method": "Controller.1.status"})json";
+        jsonData = oss.str();
+        CurlObject curlObj(url, jsonData, headers);
+        long httpCode = curlObj.gethttpcode();
+
+        if (httpCode != 200) {
+            failureCount++;
+            std::cerr << "[thunderHangRecovery]: External JSONRPC failed for " << failureCount << " retry" << std::endl;
+            timer = 5;
+            if (failureCount >= 3) {
+                std::cerr << "[thunderHangRecovery]: Number of external JSONRPC request successfully executed before thunder hang: " << successCount << std::endl;
+                std::cerr << "[thunderHangRecovery]: Thunder is not responding to the 3 consecutive external JSONRPC request, so killing the WPEFramework process" << std::endl;
+                system("killall -s SIGHUP WPEFramework");
+                failureCount = 0;
+                successCount = 0;
+            }
+        } else {
+            if(failureCount < 3 && failureCount != 0)
+                std::cerr << "[thunderHangRecovery]: External JSONRPC recovered after " << failureCount << " retry" << std::endl;
+            timer = 30;
+            failureCount = 0;
+            successCount++;
+        }
+        iterationCount++;
+        sleep(timer);
+    }
+    curl_slist_free_all(headers);
+
+    return 0;
+}
+
