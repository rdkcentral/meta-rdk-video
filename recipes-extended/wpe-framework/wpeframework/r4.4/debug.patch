Index: git/Source/WPEFramework/PluginServer.cpp
===================================================================
--- git.orig/Source/WPEFramework/PluginServer.cpp
+++ git/Source/WPEFramework/PluginServer.cpp
@@ -330,21 +330,25 @@ namespace PluginHost
     // Methods to stop/start/update the service.
     /* virtual */ Core::hresult Server::Service::Activate(const PluginHost::IShell::reason why)
     {
+        std::cout << "akshay inside Server::Service::Activate" << std::endl;
         Core::hresult result = Core::ERROR_NONE;
-
+        std::cout << "akshay going for lock Service::Activate" << std::endl;
         Lock();
-
+        std::cout << "akshay lock acquired Service::Activate" << std::endl;
         IShell::state currentState(State());
 
         if (currentState == IShell::state::ACTIVATION) {
             Unlock();
+            std::cout << "akshay unlock and error inprogress" << std::endl;
             result = Core::ERROR_INPROGRESS;
         }
         else if ((currentState == IShell::state::UNAVAILABLE) || (currentState == IShell::state::DEACTIVATION) || (currentState == IShell::state::DESTROYED) ) {
             Unlock();
+            std::cout << "akshay unlock and error illegal" << std::endl;
             result = Core::ERROR_ILLEGAL_STATE;
         } else if (currentState == IShell::state::HIBERNATED) {
             result = Wakeup();
+            std::cout << "akshay unlock and wake up from HIBERNATED" << std::endl;
             Unlock();
         } else if ((currentState == IShell::state::DEACTIVATED) || (currentState == IShell::state::PRECONDITION)) {
 
@@ -402,15 +406,17 @@ namespace PluginHost
                 }
 
                 TRACE(Activity, (_T("Activation plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
-
+                std::cout << "akshay Activation plugin [" << className.c_str() << "]:[" << callSign.c_str() << "]" << std::endl;
+                std::cout << "akshay going for Initialize call from service::activate" << std::endl;
                 _administrator.Initialize(callSign, this);
                 
+                std::cout << "akshay back from Initialize to service::activate function" << std::endl;
                 State(ACTIVATION);
 
                 Unlock();
-
+                std::cout << "akshay actual calling plugin initialize" << std::endl;
                 REPORT_DURATION_WARNING( { ErrorMessage(_handler->Initialize(this)); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::ACTIVATION, callSign.c_str());
-
+                std::cout << "akshay back from actual plugin initialize call" << std::endl;
                 if (HasError() == true) {
                     result = Core::ERROR_GENERAL;
 
@@ -445,17 +451,24 @@ namespace PluginHost
                         }
                     }
 
+                    std::cout << "akshay going for activated syslog from service::activate" << std::endl;
                     SYSLOG(Logging::Startup, (_T("Activated plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
+                    std::cout << "akshay back from activated syslog from service::activate" << std::endl;
                     Lock();
                     State(ACTIVATED);
+                    std::cout << "akshay going for activated method from service::activate" << std::endl;
                     _administrator.Activated(callSign, this);
+                    std::cout << "akshay back from activated method from service::activate" << std::endl;
 
 #if THUNDER_RESTFULL_API
+                    std::cout << "akshay inside if_def going for notification method" << std::endl;
                     _administrator.Notification(_T("{\"callsign\":\"") + callSign + _T("\",\"state\":\"deactivated\",\"reason\":\"") + textReason.Data() + _T("\"}"));
+                    std::cout << "akshay inside if_def came back from notification method" << std::endl;
 #endif
 
+                    std::cout << "akshay outsidegoing for notification method" << std::endl;
                     _administrator.Notification(PluginHost::Server::ForwardMessage(callSign, string(_T("{\"state\":\"activated\",\"reason\":\"")) + textReason.Data() + _T("\"}")));
-
+                    std::cout << "akshay outside back from notification method" << std::endl;
                     IStateControl* stateControl = nullptr;
                     if ((Resumed() == true) && ((stateControl = _handler->QueryInterface<PluginHost::IStateControl>()) != nullptr)) {
 
@@ -470,6 +483,8 @@ namespace PluginHost
             Unlock();
         }
 
+        std::cout << "akshay returning from service::activate" << std::endl;
+        std::cout << "akshay service::activate result is " << result << std::endl;
         return (result);
     }
 
@@ -511,10 +526,11 @@ namespace PluginHost
 
     /* virtual */ Core::hresult Server::Service::Deactivate(const reason why)
     {
+        std::cout << "akshay inside Server::Service::Deactivate" << std::endl;
         Core::hresult result = Core::ERROR_NONE;
-
+        std::cout << "akshay going for lock Service::Deactivate" << std::endl;
         Lock();
-
+        std::cout << "akshay lock acquired Service::Deactivate" << std::endl;
         IShell::state currentState(State());
 
         if (currentState == IShell::state::DEACTIVATION) {
@@ -531,11 +547,14 @@ namespace PluginHost
 
             if(currentState == IShell::state::HIBERNATED)
             {
+                std::cout << "akshay inside hibernated state" << std::endl;
                 uint32_t wakeupResult = Wakeup(3000);
                 if(wakeupResult != Core::ERROR_NONE)
                 {
                     //Force Activated state
+                    std::cout << "akshay wakeup failed, forcing activated state" << std::endl;
                     State(ACTIVATED);
+                    std::cout << "akshay forced activated state" << std::endl;
                 }
                 currentState = ACTIVATED;
             }
@@ -548,7 +567,9 @@ namespace PluginHost
 
                 if (currentState == IShell::ACTIVATED) {
                     TRACE(Activity, (_T("Deactivating plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
+                    std::cout << "akshay Deactivating plugin [" << className.c_str() << "]:[" << callSign.c_str() << "]" << std::endl;
                     _administrator.Deactivated(callSign, this);
+                    std::cout << "akshay back from Deactivated call" << std::endl;
                 }
 
                 // We might require PostMortem analyses if the reason is not really clear. Call the PostMortum installed so it can generate
@@ -573,15 +594,19 @@ namespace PluginHost
             }
 
             if (currentState != IShell::state::ACTIVATION) {
-
+                std::cout << "akshay going for deactivated syslog" << std::endl; 
                 SYSLOG(Logging::Shutdown, (_T("Deactivated plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
+                std::cout << "akshay back from deactivated syslog" << std::endl;
 
 
 #if THUNDER_RESTFULL_API
+                std::cout << "akshay inside if_def going for notification method" << std::endl;
                 _administrator.Notification(_T("{\"callsign\":\"") + callSign + _T("\",\"state\":\"deactivated\",\"reason\":\"") + textReason.Data() + _T("\"}"));
+                std::cout << "akshay inside if_def came back from notification method" << std::endl;
 #endif
-
+                std::cout << "akshay outsidegoing for notification method" << std::endl;
                 _administrator.Notification(PluginHost::Server::ForwardMessage(callSign, string(_T("{\"state\":\"deactivated\",\"reason\":\"")) + textReason.Data() + _T("\"}")));
+                std::cout << "akshay outside back from notification method" << std::endl;
 
             }
 
@@ -596,6 +621,8 @@ namespace PluginHost
 
         Unlock();
 
+        std::cout << "akshay returning from service::deactivate" << std::endl;
+        std::cout << "akshay service::deactivate result is " << result << std::endl;
         return (result);
     }
