diff --git a/Source/cryptalgo/SecureSocketPort.cpp b/Source/cryptalgo/SecureSocketPort.cpp
index 628c0308..16ea7cb8 100644
--- a/Source/cryptalgo/SecureSocketPort.cpp
+++ b/Source/cryptalgo/SecureSocketPort.cpp
@@ -212,7 +212,7 @@ void SecureSocketPort::Handler::ValidateHandShake() {
 
 void SecureSocketPort::Handler::Update() {
     if (IsOpen() == true) {
-        int result;
+        int result = 1;
 
         if (_handShaking == IDLE) {
             SSL_set_tlsext_host_name(static_cast<SSL*>(_ssl), RemoteNode().HostName().c_str());
diff --git a/Source/websocket/JSONRPCLink.h b/Source/websocket/JSONRPCLink.h
index 0317c288..6a202c9b 100644
--- a/Source/websocket/JSONRPCLink.h
+++ b/Source/websocket/JSONRPCLink.h
@@ -224,9 +224,13 @@ namespace WPEFramework {
 				void Register(LinkType<INTERFACE>& client)
 				{
 					_adminLock.Lock();
-					ASSERT(std::find(_observers.begin(), _observers.end(), &client) == _observers.end());
-					_observers.push_back(&client);
-					_adminLock.Unlock();
+					typename std::list<LinkType<INTERFACE>* >::iterator index = std::find(_observers.begin(), _observers.end(), &client);
+                    ASSERT(index == _observers.end());
+                    if (index == _observers.end()) {
+                        _observers.push_back(&client);
+                    }
+
+                    _adminLock.Unlock();
 					if (_channel.IsOpen() == true) {
 						client.Opened();
 					}
@@ -235,6 +239,7 @@ namespace WPEFramework {
 				{
 					_adminLock.Lock();
 					typename std::list<LinkType<INTERFACE>* >::iterator index(std::find(_observers.begin(), _observers.end(), &client));
+					ASSERT(index != _observers.end());
 					if (index != _observers.end()) {
 						_observers.erase(index);
 					}
@@ -448,6 +453,60 @@ namespace WPEFramework {
 
 			using PendingMap = std::unordered_map<uint32_t, Entry>;
 			using InvokeFunction = Core::JSONRPC::InvokeFunction;
+			class Handler {
+				public:
+				using HandlerMap = std::unordered_map<string, InvokeFunction>;
+	
+				public:
+					Handler():_adminLock(),_invokeMap(){}
+					Handler(const Handler&) = delete;
+					Handler(Handler&&) = delete;
+					Handler& operator=(const Handler&) = delete;
+					Handler& operator=(Handler&&) = delete;
+					~Handler() = default;
+					void Register(const string& methodName, const InvokeFunction& lamda)
+					{
+						_adminLock.Lock();
+						auto retval = _invokeMap.emplace(std::piecewise_construct, 
+											std::make_tuple(methodName), 
+											std::make_tuple(lamda));
+						
+						if ( retval.second == false ) {
+							retval.first->second = lamda;
+						}
+						_adminLock.Unlock();
+					}
+					void Unregister(const string& methodName)
+					{
+						_adminLock.Lock();
+						HandlerMap::iterator index = _invokeMap.find(methodName);
+	
+						ASSERT((index != _invokeMap.end()) && _T("Do not unregister a method that is not registered"));
+	
+						if (index != _invokeMap.end()) {
+							_invokeMap.erase(index);
+						}
+						_adminLock.Unlock();
+					}
+	
+					uint32_t Invoke(const Core::JSONRPC::Context& context, const string& method, const string& parameters, string& response)
+					{
+						uint32_t result = Core::ERROR_BAD_REQUEST;
+	
+						response.clear();
+	
+						_adminLock.Lock();
+						HandlerMap::iterator index = _invokeMap.find(Core::JSONRPC::Message::Method(method));
+						if(index != _invokeMap.end()) {
+							result = index->second(context, method, parameters, response);
+						}
+						_adminLock.Unlock();
+						return (result);
+					}
+				private:
+					mutable Core::CriticalSection _adminLock;
+					HandlerMap _invokeMap;
+				};
 
 		protected:
 			static constexpr uint32_t DefaultWaitTime = 10000;
@@ -456,7 +515,7 @@ namespace WPEFramework {
 				: _adminLock()
 				, _connectId(RemoteNodeId())
 				, _channel(CommunicationChannel::Instance(_connectId, string("/jsonrpc/") + connectingCallsign, query))
-				, _handler({ DetermineVersion(callsign) })
+				, _handler()
 				, _callsign(callsign.empty() ? string() : Core::JSONRPC::Message::Callsign(callsign + '.'))
 				, _localSpace()
 				, _pendingQueue()
@@ -513,10 +572,6 @@ namespace WPEFramework {
 			{
 				return (_callsign);
 			}
-			Core::JSONRPC::Handler::EventIterator Events() const
-			{
-				return (_handler.Events());
-			}
 			template <typename INBOUND, typename METHOD>
 			void Assign(const string& eventName, const METHOD& method)
 			{
@@ -1138,7 +1193,7 @@ namespace WPEFramework {
 			Core::CriticalSection _adminLock;
 			Core::NodeId _connectId;
 			Core::ProxyType< CommunicationChannel > _channel;
-			Core::JSONRPC::Handler _handler;
+			Handler _handler;
 			string _callsign;
 			string _localSpace;
 			PendingMap _pendingQueue;
@@ -1159,6 +1214,21 @@ namespace WPEFramework {
 			class Connection : public LinkType<INTERFACE> {
 			private:
 				using Base = LinkType<INTERFACE>;
+				class EventSubscriber: public Core::Thread {
+					public:
+							EventSubscriber () = delete;
+							EventSubscriber(const EventSubscriber&) = delete;
+							EventSubscriber& operator= (const EventSubscriber&) = delete;
+							EventSubscriber(Connection& parent):Thread(WPEFramework::Core::Thread::DefaultStackSize(), _T("SmartLinkTypeEventSubscriber")), _parent(parent){}
+							~EventSubscriber() = default;
+							uint32_t Worker() override 
+							{
+							_parent.SubscribeEvents();
+							return Core::infinite;
+							}
+					private:
+							Connection& _parent;
+					};
 			public:
 				static constexpr uint32_t DefaultWaitTime = Base::DefaultWaitTime;
 			private:
@@ -1180,6 +1250,14 @@ namespace WPEFramework {
 						Add(_T("callsign"), &Callsign);
 						Add(_T("state"), &State);
 					}
+					Statechange(Statechange&& move)
+                        	: Core::JSON::Container()
+                        	, Callsign(std::move(move.Callsign))
+                        	, State(std::move(move.State))
+                    {
+                        	Add(_T("callsign"), &Callsign);
+                        	Add(_T("state"), &State);
+                    }
 					Statechange& operator=(const Statechange&) = delete;
 
 				public:
@@ -1201,6 +1279,12 @@ namespace WPEFramework {
 					{
 						Add(_T("state"), &State);
 					}
+                    CurrentState(CurrentState&& move)
+                        	: Core::JSON::Container()
+                        	, State(std::move(move.State))
+                    {
+                        	Add(_T("state"), &State);
+                    }
 					CurrentState& operator=(const CurrentState&) = delete;
 
 				public:
@@ -1224,6 +1308,9 @@ namespace WPEFramework {
 					: Base(callsign, string(), localCallsign, query)
 					, _monitor(string(), false)
 					, _parent(parent)
+                    , _adminLock()
+                    , _subscriptions()
+                    , _eventSubscriber(*this)
 					, _state(UNKNOWN)
 				{
 					_monitor.template Assign<Statechange>(_T("statechange"), &Connection::state_change, this);
@@ -1232,6 +1319,8 @@ namespace WPEFramework {
 				~Connection() override
 				{
 					_monitor.Revoke(_T("statechange"));
+					_eventSubscriber.Stop();
+					_eventSubscriber.Wait(Core::Thread::STOPPED, Core::infinite);
 				}
 
 			public:
@@ -1239,23 +1328,67 @@ namespace WPEFramework {
 				{
 					return (_state == ACTIVATED);
 				}
+				void SubscribeEvents() {
+					_adminLock.Lock();
+					for (const string& iter: _subscriptions) {
+						SendSubscribeRequest(iter);
+					}
+					_adminLock.Unlock();
+					_eventSubscriber.Block();
+					_state = state::ACTIVATED;
+					_parent.StateChange();
+			 }
+
+			template <typename INBOUND, typename METHOD>
+			uint32_t Subscribe(const uint32_t waitTime, const string& eventName, const METHOD& method)
+			{
+				auto result = Base::template Subscribe<INBOUND, METHOD>(waitTime, eventName, method);
+				if (result == Core::ERROR_NONE) {
+					_adminLock.Lock();
+					_subscriptions.insert(string(eventName));
+					_adminLock.Unlock();
+				}
+				return result;
+			}
+			template <typename INBOUND, typename METHOD, typename REALOBJECT>
+			uint32_t Subscribe(const uint32_t waitTime, const string& eventName, const METHOD& method, REALOBJECT* objectPtr)
+			{
+				auto result = Base::template Subscribe<INBOUND, METHOD, REALOBJECT>(waitTime, eventName, method, objectPtr);
+				if (result == Core::ERROR_NONE) {
+					_adminLock.Lock();
+					_subscriptions.insert(string(eventName));
+					_adminLock.Unlock();
+				}
+				return result;
+			}
+			void Unsubscribe(const uint32_t waitTime, const string& eventName)
+			{
+				_adminLock.Lock();
+				ASSERT(_subscriptions.find(eventName) != _subscriptions.end());
+				_subscriptions.erase(eventName);
+				_adminLock.Unlock();
+				return Base::Unsubscribe(waitTime, eventName);
+			}
+
 
 			private:
+					uint32_t SendSubscribeRequest(const string& eventName) {
+						uint32_t retVal = Core::ERROR_UNAVAILABLE;
+						Core::JSONRPC::Message response;
+						const string parameters("{ \"event\": \"" + eventName + "\", \"id\": \"" + Base::Namespace() + "\"}");
+						auto result = Base::template Invoke<string>(DefaultWaitTime, "register", parameters, response);
+						if (result == Core::ERROR_NONE && response.Error.IsSet() != true) {
+							retVal = Core::ERROR_NONE;
+						}
+						return retVal;
+
+					}
 				void SetState(const JSONRPC::JSONPluginState value)
 				{
 					if (value == JSONRPC::JSONPluginState::ACTIVATED) {
 						if ((_state != ACTIVATED) && (_state != LOADING)) {
 							_state = state::LOADING;
-							auto index(Base::Events());
-							while (index.Next() == true) {
-								_events.push_back(index.Event());
-							}
-							next_event(Core::JSON::String(), nullptr);
-						}
-						else if (_state == LOADING) {
-							_state = state::ACTIVATED;
-							_parent.StateChange();
-
+							_eventSubscriber.Run();
 						}
 					}
 					else if (value == JSONRPC::JSONPluginState::DEACTIVATED) {
@@ -1286,18 +1419,6 @@ namespace WPEFramework {
 						_monitor.template Dispatch<void>(DefaultWaitTime, method, &Connection::monitor_response, this);
 					}
 				}
-				void next_event(const Core::JSON::String& parameters, const Core::JSONRPC::Error* result)
-				{
-					// See if there are events pending for registration...
-					if (_events.empty() == false) {
-						const string parameters("{ \"event\": \"" + _events.front() + "\", \"id\": \"" + Base::Namespace() + "\"}");
-						_events.pop_front();
-						LinkType<INTERFACE>::Dispatch(DefaultWaitTime, _T("register"), parameters, &Connection::next_event, this);
-					}
-					else {
-						SetState(JSONRPC::JSONPluginState::ACTIVATED);
-					}
-				}
 
 				void Opened() override
 				{
@@ -1310,7 +1431,9 @@ namespace WPEFramework {
 			private:
 				LinkType<INTERFACE> _monitor;
 				SmartLinkType<INTERFACE>& _parent;
-				std::list<string> _events;
+				Core::CriticalSection _adminLock;
+				std::unordered_set<string> _subscriptions;
+				EventSubscriber _eventSubscriber;
 				state _state;
 			};
 
