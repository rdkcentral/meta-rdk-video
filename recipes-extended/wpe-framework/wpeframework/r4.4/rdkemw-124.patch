diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index 317be4fd..092257a6 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -26,6 +26,7 @@
 #include "IRemoteInstantiation.h"
 #include "WarningReportingCategories.h"
 #include "PostMortem.h"
+#include <unistd.h>
 
 #ifdef PROCESSCONTAINERS_ENABLED
 #include "../processcontainers/ProcessContainer.h"
@@ -1878,6 +1879,7 @@
 
                 while ( (iter != std::end(all_paths)) && (progressedState <= 2) ) {
                     Core::File libraryToLoad(*iter);
+                    syslog(LOG_NOTICE, "Immortal WPEFramework - Line -1883 - Loading library: %s\n", libraryToLoad.Name().c_str());
 
                     if (libraryToLoad.Exists() == true) {
                         if (progressedState == 0) {
@@ -4509,38 +4511,44 @@
             return (_connections);
         }
         inline void DumpMetadata() {
-            PostMortemData data;
-            _dispatcher.Snapshot(data.WorkerPool);
+            
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginServer - Dumping Metadata - Pid: %d\n", getpid());
+            // Ensure PostMortemData is defined and included
+            // PostMortemData data;
 
-            Core::JSON::ArrayType<MetaData::Server::Minion>::Iterator index(data.WorkerPool.ThreadPoolRuns.Elements());
+            // _dispatcher.Snapshot(data.WorkerPool);
 
-            while (index.Next() == true) {
+            // Core::JSON::ArrayType<MetaData::Server::Minion>::Iterator index(data.WorkerPool.ThreadPoolRuns.Elements());
 
-                std::list<Core::callstack_info> stackList;
+            // while (index.Next() == true) {
 
-                ::DumpCallStack(static_cast<ThreadId>(index.Current().Id.Value()), stackList);
-                for(const Core::callstack_info& entry : stackList)
-                {
-                    std::string symbol = entry.function.empty() ? "Unknown symbol" : entry.function;
-                    fprintf(stderr, "[%s]:[%s]:[%d]:[%p]\n",entry.module.c_str(), symbol.c_str(),entry.line,entry.address);
-                }
-                fflush(stderr);
+            //     std::list<Core::callstack_info> stackList;
 
-                PostMortemData::Callstack dump;
-                dump.Id = index.Current().Id.Value();
+            //     ::DumpCallStack(static_cast<ThreadId>(index.Current().Id.Value()), stackList);
+            //     for(const Core::callstack_info& entry : stackList)
+            //     {
+            //         std::string symbol = entry.function.empty() ? "Unknown symbol" : entry.function;
+            //         fprintf(stderr, "[%s]:[%s]:[%d]:[%p]\n",entry.module.c_str(), symbol.c_str(),entry.line,entry.address);
+            //     }
+            //     fflush(stderr);
 
-                for (const Core::callstack_info& info : stackList) {
-                    dump.Data.Add() = CallstackData(info);
-                }
+            //     PostMortemData::Callstack dump;
+            //     dump.Id = index.Current().Id.Value();
 
-                data.Callstacks.Add(dump);
-            }
+            //     for (const Core::callstack_info& info : stackList) {
+            //         dump.Data.Add() = CallstackData(info);
+            //     }
 
-            // Drop the workerpool info (what is currently running and what is pending) to a file..
-            Core::File dumpFile(_config.PostMortemPath() + "ThunderInternals.json");
-            if (dumpFile.Create(false) == true) {
-                data.IElement::ToFile(dumpFile);
-            }
+            //     data.Callstacks.Add(dump);
+            // }
+
+            // // Drop the workerpool info (what is currently running and what is pending) to a file..
+            // Core::File dumpFile(_config.PostMortemPath() + "ThunderInternals.json");
+            // if (dumpFile.Create(false) == true) {
+            //     data.IElement::ToFile(dumpFile);
+            // }
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginServer - Dumping Metadata - Pid: %d - Done\n", getpid());
         }
         inline ServiceMap& Services()
         {

diff --git a/Source/WPEFramework/PluginHost.cpp b/Source/WPEFramework/PluginHost.cpp
index 213da58d..cc1c7ee4 100644
--- a/Source/WPEFramework/PluginHost.cpp
+++ b/Source/WPEFramework/PluginHost.cpp
@@ -21,12 +21,18 @@
 #include "core/Library.h"
 
 #include <fstream>
-
+#include <unistd.h>
 #ifndef __WINDOWS__
 #include <dlfcn.h> // for dladdr
 #include <syslog.h>
 #endif
 
+#include <pthread.h>
+#include <signal.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <unistd.h>
+
 MODULE_NAME_DECLARATION(BUILD_REFERENCE)
 
 namespace WPEFramework {
@@ -304,15 +310,32 @@
 
     void ExitDaemonHandler(int signo)
     {
+        
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [Entering func - %s]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+
+        //Use dladdr to get the function name of the original handler
+        Dl_info info2;
+        if (dladdr(reinterpret_cast<const void*>(_originalSegmentationHandler.sa_handler), &info2)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info2.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
         const char* segname = "";
         if (_background) {
             syslog(LOG_NOTICE, "Signal received %d. in process [%d]", signo, getpid());
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [Entering func - %s - Running in background]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
         } else {
             fprintf(stderr, "Signal received %d. in process [%d]\n", signo, getpid());
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [Entering func - %s - Not Running in background]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
         }
 
         if ((signo == SIGTERM) || (signo == SIGQUIT)) {
 
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [Entering func - %s]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+
             if (_background) {
                 syslog(LOG_NOTICE, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to a SIGTERM or SIGQUIT signal. Regular shutdown");
             } else {
@@ -327,23 +350,100 @@
             // From here on we do the best we can do. Have no clue what failed, try to log as much as possible and on
             // a subsequent segmentation fault, just handle it the old fashion way. The root cause has been logged
             // by than!
-            sigaction(SIGSEGV, &_originalSegmentationHandler, nullptr);
-            sigaction(SIGABRT, &_originalAbortHandler, nullptr);
 
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [Entering func - %s]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+
+            // Restore the original SIGSEGV handler and reset the struct
+            if(sigaction(SIGSEGV, &_originalSegmentationHandler, nullptr) != 0) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Failed to restore SIGSEGV handler , _originalSegmentationHandler.sa_handler : %p , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, signo);
+            } else {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Successfully restored SIGSEGV handler , _originalSegmentationHandler.sa_handler : %p , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, signo);
+                memset(&_originalSegmentationHandler, 0, sizeof(_originalSegmentationHandler));
+            }
+
+            // Restore the original SIGABRT handler and reset the struct
+            if(sigaction(SIGABRT, &_originalAbortHandler, nullptr) != 0) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Failed to restore SIGABRT handler , _originalAbortHandler.sa_handler : %p , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalAbortHandler.sa_handler, signo);
+            } else {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Successfully restored SIGABRT handler , _originalAbortHandler.sa_handler : %p , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalAbortHandler.sa_handler, signo);
+                memset(&_originalAbortHandler, 0, sizeof(_originalAbortHandler));
+            }
+            
+
+            Dl_info info;
+            if (dladdr(reinterpret_cast<const void*>(_originalSegmentationHandler.sa_handler), &info)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s - SIGSEGV or SIGABRT]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s - SIGSEGV or SIGABRT]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__); 
+            }
+
+            Dl_info info1;
+            if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info1)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info1.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Before metadata dump , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
 
             ExitHandler::DumpMetadata();
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : After metadata dump , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+
             segname = (signo == SIGSEGV) ? "a segmentation fault" : (signo == SIGABRT) ? "an abort" : "";
 
             if (_background) {
                 syslog(LOG_NOTICE, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to %s signal. All relevant data dumped", segname);
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT - Running in background]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
             } else {
+                syslog(LOG_NOTICE, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to %s signal. All relevant data dumped", segname);
                 fprintf(stderr, EXPAND_AND_QUOTE(APPLICATION_NAME) " shutting down due to %s signal. All relevant data dumped\n", segname);
                 fflush(stderr);
             }
 
-            raise(signo);
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT - Sleeping for 10 seconds before re-raising signal]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+            sleep(5);
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT - After sleep]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+            //raise(signo);
+
+            sigset_t current;
+            pthread_sigmask(SIG_SETMASK, nullptr, &current);
+
+            if (sigismember(&current, SIGSEGV)) {
+                char name[16] = {0};
+                pthread_getname_np(pthread_self(), name, sizeof(name));
+                pid_t tid = syscall(SYS_gettid);
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- Thread [%s] (TID: %d) has SIGSEGV blocked", name, tid);
+            }
+            else {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- Thread has SIGSEGV unblocked");
+            }
+
+            //print the function name of the sa , current handler and original handler
+            Dl_info info25;
+            if (dladdr(reinterpret_cast<const void*>(_originalSegmentationHandler.sa_handler), &info25)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : original segmentation handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info25.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for sa handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
+            //print the function name of the current handler
+            Dl_info info26;
+            if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info26)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : original Abort handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info26.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for current handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
+            int status = raise(signo);
+            if (status != 0) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Failed to re-raise signal , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+            } else {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGSEGV or SIGABRT]  : Successfully re-raised signal , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
+            }
         }
         else if (signo == SIGUSR1) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func -  %s - SIGUSR1]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p  , signo : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, signo);
             ExitHandler::DumpMetadata();
         }
     }
@@ -353,10 +453,50 @@
         _adminLock.Lock();
         struct sigaction sa, current_sa;
 
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
+
         memset(&current_sa, 0, sizeof(struct sigaction));
+
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s ]  : Before sigaction for SIGSEGV - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
         sigaction(SIGSEGV, nullptr, &current_sa);
+
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s ]  : After sigaction for SIGSEGV - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
+
+
+        //print the function name of the original handler
+        Dl_info info11;
+        if (dladdr(reinterpret_cast<const void*>(_originalSegmentationHandler.sa_handler), &info11)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info11.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
+        //print the function name of current handler
+        Dl_info info12;
+        if (dladdr(reinterpret_cast<const void*>(current_sa.sa_handler), &info12)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Current handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info12.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for current handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
+
+        //print the function name of the sa handler
+        Dl_info info13;
+        if (dladdr(reinterpret_cast<const void*>(sa.sa_handler), &info13)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : sa handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info13.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for sa handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
+
         if (ExitDaemonHandler  != current_sa.sa_handler)
         {
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [ func - %s ]  : Entering [if (ExitDaemonHandler  != current_sa.sa_handler)] - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
             _originalSegmentationHandler = current_sa;
              memset(&sa, 0, sizeof(struct sigaction));
              sigemptyset(&sa.sa_mask);
@@ -368,13 +508,79 @@
                  fprintf(stdout, "Registering ExitDaemonHandler = %p for SIGSEGV & Previous Handler = %p \n", (void*)ExitDaemonHandler, (void*)current_sa.sa_handler);
                  fflush(stdout);
              }
+
+             syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s ]  : [ExitDaemonHandler  != current_sa.sa_handler]- Before sigaction - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p , _background : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, _background);
+
              sigaction(SIGSEGV, &sa, nullptr);
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s ]  : [ExitDaemonHandler  != current_sa.sa_handler]- After sigaction - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
+
+
+            //print the function name of the sa handler , current handler and original handler
+            Dl_info info14;
+            if (dladdr(reinterpret_cast<const void*>(sa.sa_handler), &info14)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : sa handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info14.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for sa handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
+            //print the function name of the current handler
+            Dl_info info15;
+            if (dladdr(reinterpret_cast<const void*>(current_sa.sa_handler), &info15)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Current handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info15.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for current handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
+            //print the function name of the original handler
+            Dl_info info16; 
+            if (dladdr(reinterpret_cast<const void*>(_originalSegmentationHandler.sa_handler), &info16)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info16.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
         }
 
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
         memset(&current_sa, 0, sizeof(struct sigaction));
+
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s ]  : Before sigaction for SIGABRT - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
         sigaction(SIGABRT, nullptr, &current_sa);
+
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s ]  : After sigaction for SIGABRT - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
+
+        //print the function name of the original handler
+        Dl_info info17;
+        if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info17)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name-SIGABRT: %s\n", __LINE__, getpid(), __FUNCTION__, info17.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler-SIGABRT\n", __LINE__, getpid(), __FUNCTION__);
+        }
+        //print the function name of current handler
+        Dl_info info18;
+        if (dladdr(reinterpret_cast<const void*>(current_sa.sa_handler), &info18)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Current handler function name-SIGABRT: %s\n", __LINE__, getpid(), __FUNCTION__, info18.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for current handler-SIGABRT\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
+        //print the function name of the sa handler
+        Dl_info info19;
+        if (dladdr(reinterpret_cast<const void*>(sa.sa_handler), &info19)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : sa handler function name-SIGABRT: %s\n", __LINE__, getpid(), __FUNCTION__, info19.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for sa handler-SIGABRT\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
         if (ExitDaemonHandler  != current_sa.sa_handler)
         {
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [ func - %s ]  : Entering [if (ExitDaemonHandler  != current_sa.sa_handler)] - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
             _originalAbortHandler = current_sa;
              memset(&sa, 0, sizeof(struct sigaction));
              sigemptyset(&sa.sa_mask);
@@ -386,8 +592,56 @@
                  fprintf(stdout, "Registering ExitDaemonHandler = %p for SIGABRT & Previous Handler = %p \n", (void*)ExitDaemonHandler, (void*)current_sa.sa_handler);
                  fflush(stdout);
              }
+
+             syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s ]  : [ExitDaemonHandler  != current_sa.sa_handler]- Before sigaction - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p , _background : %d\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler, _background);
+
              sigaction(SIGABRT, &sa, nullptr);
+
+             syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s ]  : [ExitDaemonHandler  != current_sa.sa_handler]- After sigaction - current_sa.sa_handler : %p , sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__, getpid(), __FUNCTION__, (void*)current_sa.sa_handler, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
+            //print the function name of the sa handler , current handler and original handler
+            Dl_info info20;
+
+                if (dladdr(reinterpret_cast<const void*>(sa.sa_handler), &info20)) {
+                    syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : sa handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info20.dli_sname);
+                } else {   
+                    syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for sa handler\n", __LINE__, getpid(), __FUNCTION__);
+                }
+
+            //print the function name of the current handler
+            Dl_info info21;
+            if (dladdr(reinterpret_cast<const void*>(current_sa.sa_handler), &info21)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Current handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info21.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for current handler\n", __LINE__, getpid(), __FUNCTION__);
+
+            }
+
+            //print the function name of the original handler
+            Dl_info info22;
+            if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info22)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info22.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+            }
+
+        //use dladdr to get the function name of the original handler
+        Dl_info info4;
+        if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info4)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info4.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
+        //Use dladdr to get the function name of the original handler
+        Dl_info info5;
+        if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info5)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info5.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [Entering func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
         }
+
         _adminLock.Unlock();
     }
 #endif
@@ -492,8 +746,36 @@
 #endif
 
         ConsoleOptions options(argc, argv);
-        WPEFramework::Core::Library::RegisterLibraryLoadCallback(SetupCrashHandler);
 
+
+      
+        struct sigaction _currentSaabortHandler, _currentSasegmentationHandler;
+
+        memset(&_currentSaabortHandler, 0, sizeof(struct sigaction));
+        memset(&_currentSasegmentationHandler, 0, sizeof(struct sigaction));
+        sigaction(SIGSEGV, nullptr, &_currentSasegmentationHandler);
+        sigaction(SIGABRT, nullptr, &_currentSaabortHandler);
+
+        //Use dladdr to get the function name of the current handler
+        Dl_info info1;
+        if (dladdr(reinterpret_cast<const void*>(_currentSasegmentationHandler.sa_handler), &info1)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Current handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info1.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Failed to get function name for current handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+        //Use dladdr to get the function name of the current handler
+        Dl_info info2;
+        if (dladdr(reinterpret_cast<const void*>(_currentSaabortHandler.sa_handler), &info2)) {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Current handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info2.dli_sname);
+        } else {   
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Failed to get function name for current handler\n", __LINE__, getpid(), __FUNCTION__);
+        }
+
+
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [fn-%s] :  Before RegisterLibraryLoadCallback _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__ , getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+        //WPEFramework::Core::Library::RegisterLibraryLoadCallback(SetupCrashHandler);
+
+        syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [fn-%s] :  After RegisterLibraryLoadCallback _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__ , getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
         if (options.RequestUsage()) {
 #ifndef __WINDOWS__
             syslog(LOG_ERR, EXPAND_AND_QUOTE(APPLICATION_NAME) " Daemon failed to start. Incorrect Options.");
@@ -509,18 +791,50 @@
         }
 #ifndef __WINDOWS__
         else {
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [fn-%s]  : _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__ , getpid(), __FUNCTION__, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
             struct sigaction sa;
             memset(&sa, 0, sizeof(struct sigaction));
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [fn-%s]  : sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__ , getpid(), __FUNCTION__, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+
             sigemptyset(&sa.sa_mask);
             sa.sa_handler = ExitDaemonHandler;
             sa.sa_flags = 0; // not SA_RESTART!;
 
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [fn-%s]  : Before sigaction - sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__ , getpid(), __FUNCTION__, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+            sleep(10);
             sigaction(SIGINT, &sa, nullptr);
             sigaction(SIGTERM, &sa, nullptr);
             sigaction(SIGQUIT, &sa, nullptr);
             sigaction(SIGUSR1, &sa, nullptr);
             sigaction(SIGSEGV, &sa, &_originalSegmentationHandler);
             sigaction(SIGABRT, &sa, &_originalAbortHandler);
+
+            syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp - [%d] [PID-%d] [fn-%s]  : After sigaction - sa.sa_handler : %p , _originalSegmentationHandler.sa_handler : %p , _originalAbortHandler.sa_handler : %p\n", __LINE__ , getpid(), __FUNCTION__, (void*)sa.sa_handler, (void*)_originalSegmentationHandler.sa_handler, (void*)_originalAbortHandler.sa_handler);
+            //dladdr(reinterpret_cast<const void*>(sa.sa_handler), &info);
+            Dl_info info3;
+            if (dladdr(reinterpret_cast<const void*>(sa.sa_handler), &info3)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Original handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info3.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+            } 
+
+            //print the function name of the original handler
+            Dl_info info4;
+            if (dladdr(reinterpret_cast<const void*>(_originalAbortHandler.sa_handler), &info4)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Original Abort handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info4.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
+            //print the function name of the original segmentation handler
+            Dl_info info5;
+            if (dladdr(reinterpret_cast<const void*>(_originalSegmentationHandler.sa_handler), &info5)) {
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Original Segmentation handler function name: %s\n", __LINE__, getpid(), __FUNCTION__, info5.dli_sname);
+            } else {   
+                syslog(LOG_NOTICE, "Immortal WPEFramework - PluginHost.cpp- [%d] [PID-%d] [func - %s]  : Failed to get function name for original handler\n", __LINE__, getpid(), __FUNCTION__);
+            }
+
         }
 
         if (atexit(ForcedExit) != 0) {


diff --git a/Source/core/Library.cpp b/Source/core/Library.cpp
index 213da58d..cc1c7ee4 100644
--- a/Source/core/Library.cpp
+++ b/Source/core/Library.cpp
@@ -34,6 +34,8 @@
     {
        assert(callback != nullptr);
        assert(g_loadCallback == nullptr);
+       
+       syslog(LOG_INFO, "Immortal WPEFramework::Core::Library::RegisterLibraryLoadCallback - g_loadCallback = %p\n", callback);
        g_loadCallback = callback;
     }

diff --git a/Source/WPEProcess/Process.cpp b/WPEProcess/Process.cpp
index 213da58d..cc1c7ee4 100644
--- a/Source/WPEProcess/Process.cpp
+++ b/Source/WPEProcess/Process.cpp
@@ -6,6 +6,8 @@
 #ifdef USE_BREAKPAD
 #include <client/linux/handler/exception_handler.h>
 #endif
+#include <unistd.h>
+#include <dlfcn.h> 
 
 MODULE_NAME_DECLARATION(BUILD_REFERENCE)
 
@@ -598,11 +600,25 @@
         WARNING_REPORTING_THREAD_SETCALLSIGN_GUARD(callsign.c_str());
 
         #ifdef USE_BREAKPAD
+        syslog(LOG_NOTICE, "Immortal WPEProcess - pid - %d , breakpad enabled\n", getpid());
         google_breakpad::MinidumpDescriptor descriptor(options.PostMortemPath);
         google_breakpad::ExceptionHandler eh(descriptor, NULL,
             [](const google_breakpad::MinidumpDescriptor&, void*, bool succeeded)
                 { return succeeded; },
             NULL, true, -1);
+        syslog(LOG_NOTICE, "Immortal WPEProcess - pid - %d , breakpad enabled and google_breakpad::ExceptionHandler registered\n", getpid());
+        //Get and print the current handler for the signal SIGSEGV
+        struct sigaction current_sa;
+        memset(&current_sa, 0, sizeof(struct sigaction));
+        sigaction(SIGSEGV, nullptr, &current_sa);
+        syslog(LOG_NOTICE, "Immortal WPEProcess - pid - %d , breakpad enabled and current handler for SIGSEGV is %p\n", getpid(), (void*)current_sa.sa_handler);
+        //Use dl to find the function name of current handler
+        Dl_info dlinfo;
+        if (dladdr(reinterpret_cast<const void*>(current_sa.sa_handler), &dlinfo)) {
+            syslog(LOG_NOTICE, "Immortal WPEProcess - pid - %d , breakpad enabled and current handler for SIGSEGV is %s\n", getpid(), dlinfo.dli_sname);
+        } else {
+            syslog(LOG_NOTICE, "Immortal WPEProcess - pid - %d , breakpad enabled and current handler for SIGSEGV is unknown\n", getpid());
+        }
         #endif
 
         // Any remote connection that will be spawned from here, will have this ExchangeId as its parent ID.
