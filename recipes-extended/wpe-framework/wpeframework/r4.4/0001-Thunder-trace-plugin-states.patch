diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 3ad91a91..314a57ae 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -332,6 +332,7 @@ namespace PluginHost
     {
         Core::hresult result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -470,12 +471,14 @@ namespace PluginHost
             Unlock();
         }
 
+        SYSLOG(Logging::Notification, (_T("<< ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         return (result);
     }
 
     uint32_t Server::Service::Resume(const reason why) {
         uint32_t result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -506,6 +509,7 @@ namespace PluginHost
 
         Unlock();
 
+        SYSLOG(Logging::Notification, (_T("<< ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         return (result);
     }
 
@@ -513,7 +517,9 @@ namespace PluginHost
     {
         Core::hresult result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
+        SYSLOG(Logging::Notification, (_T("## %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
         IShell::state currentState(State());
 
@@ -545,6 +551,7 @@ namespace PluginHost
 
                 State(DEACTIVATION);
                 Unlock();
+        SYSLOG(Logging::Notification, (_T("unlock ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
                 if (currentState == IShell::ACTIVATED) {
                     TRACE(Activity, (_T("Deactivating plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
@@ -560,9 +567,12 @@ namespace PluginHost
                     DisableWebServer();
                 }
 
+        SYSLOG(Logging::Notification, (_T("Deinitialize >> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
                 REPORT_DURATION_WARNING( { _handler->Deinitialize(this); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::DEACTIVATION, callSign.c_str());
+        SYSLOG(Logging::Notification, (_T("Deinitialize << ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
                 Lock();
+        SYSLOG(Logging::Notification, (_T("Lock ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
                 if (_jsonrpc != nullptr) {
                     _jsonrpc->Deactivate();
@@ -595,6 +605,7 @@ namespace PluginHost
 
 
         Unlock();
+        SYSLOG(Logging::Notification, (_T("Unlock << ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
         return (result);
     }
@@ -603,6 +614,7 @@ namespace PluginHost
 
         uint32_t result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         if (Startup() == PluginHost::IShell::startup::DEACTIVATED) {
             // We need to shutdown completely
             result = Deactivate(why);
@@ -634,12 +646,14 @@ namespace PluginHost
             Unlock();
         }
 
+        SYSLOG(Logging::Notification, (_T("<< ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         return (result);
     }
 
     /* virtual */ Core::hresult Server::Service::Unavailable(const reason why) {
         Core::hresult result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -676,6 +690,7 @@ namespace PluginHost
         }
 
         Unlock();
+        SYSLOG(Logging::Notification, (_T("<< ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
         return (result);
 
@@ -684,6 +699,7 @@ namespace PluginHost
     Core::hresult Server::Service::Hibernate(const uint32_t timeout VARIABLE_IS_NOT_USED) /* override */ {
         Core::hresult result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -748,6 +764,7 @@ namespace PluginHost
             }
         }
         Unlock();
+        SYSLOG(Logging::Notification, (_T("<< ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
         return (result);
 
@@ -756,6 +773,7 @@ namespace PluginHost
     uint32_t Server::Service::Wakeup(const uint32_t timeout VARIABLE_IS_NOT_USED) {
         Core::hresult result = Core::ERROR_NONE;
 
+        SYSLOG(Logging::Notification, (_T(">> ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
         IShell::state currentState(State());
 
         if (currentState != IShell::state::HIBERNATED) {
@@ -789,6 +807,7 @@ namespace PluginHost
                 local->Release();
             }
         }
+        SYSLOG(Logging::Notification, (_T("<< ThunderTraces %d %s for %s"), __LINE__, __PRETTY_FUNCTION__, Callsign().c_str());
 
         return (result);
     }
