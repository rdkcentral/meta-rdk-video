diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 028994b4..a37b228e 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -324,19 +324,23 @@ namespace PluginHost
     {
         Core::hresult result = Core::ERROR_NONE;
 
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
 
         if (currentState == IShell::state::ACTIVATION) {
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
             Unlock();
             result = Core::ERROR_INPROGRESS;
         }
         else if ((currentState == IShell::state::UNAVAILABLE) || (currentState == IShell::state::DEACTIVATION) || (currentState == IShell::state::DESTROYED) ) {
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
             Unlock();
             result = Core::ERROR_ILLEGAL_STATE;
         } else if (currentState == IShell::state::HIBERNATED) {
             result = Wakeup(3000);
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
             Unlock();
         } else if ((currentState == IShell::state::DEACTIVATED) || (currentState == IShell::state::PRECONDITION)) {
 
@@ -352,6 +356,7 @@ namespace PluginHost
                 SYSLOG(Logging::Startup, (_T("Loading of plugin [%s]:[%s], failed. Error [%s]"), className.c_str(), callSign.c_str(), ErrorMessage().c_str()));
                 result = Core::ERROR_UNAVAILABLE;
 
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
                 Unlock();
 
                 // See if the preconditions have been met..
@@ -383,6 +388,7 @@ namespace PluginHost
                     TRACE(Activity, (_T("Delta preconditions: %s"), feedback.c_str()));
                 }
 
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
                 Unlock();
 
             } else {
@@ -399,6 +405,7 @@ namespace PluginHost
                 
                 State(ACTIVATION);
 
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
                 Unlock();
 
                 REPORT_DURATION_WARNING( { ErrorMessage(_handler->Initialize(this)); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::ACTIVATION, callSign.c_str());
@@ -459,6 +466,7 @@ namespace PluginHost
                 }
             }
         } else {
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
             Unlock();
         }
 
@@ -468,6 +476,7 @@ namespace PluginHost
     uint32_t Server::Service::Resume(const reason why) {
         uint32_t result = Core::ERROR_NONE;
 
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -496,6 +505,7 @@ namespace PluginHost
             }
         }
 
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Unlock();
 
         return (result);
@@ -505,6 +515,7 @@ namespace PluginHost
     {
         Core::hresult result = Core::ERROR_NONE;
 
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -536,6 +547,7 @@ namespace PluginHost
                 ASSERT(_handler != nullptr);
 
                 State(DEACTIVATION);
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
                 Unlock();
 
                 if (currentState == IShell::ACTIVATED) {
@@ -549,12 +561,16 @@ namespace PluginHost
 
                 // If we enabled the webserver, we should also disable it.
                 if ((PluginHost::Service::Configuration().WebUI.IsSet()) || (PluginHost::Service::Configuration().WebUI.Value().empty() == false)) {
+                    TRACE(Activity, (_T("Deactivating plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
                     DisableWebServer();
                 }
 
+                TRACE_L1(">> %s Deinitialize", Callsign().c_str());
                 REPORT_DURATION_WARNING( { _handler->Deinitialize(this); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::DEACTIVATION, callSign.c_str());
+                TRACE_L1("<< %s Deinitialize", Callsign().c_str());
 
                 Lock();
+                TRACE_L1("## %s Lock", Callsign().c_str());
 
                 if (_jsonrpc != nullptr) {
                     _jsonrpc->Deactivate();
@@ -586,7 +602,11 @@ namespace PluginHost
         }
 
 
+        TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Unlock();
+        TRACE_L1("## %s Unlock", Callsign().c_str());
+
+        TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
 
         return (result);
     }
@@ -595,11 +615,13 @@ namespace PluginHost
 
         uint32_t result = Core::ERROR_NONE;
 
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         if (Startup() == PluginHost::IShell::startup::DEACTIVATED) {
             // We need to shutdown completely
             result = Deactivate(why);
         }
         else {
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
             Lock();
 
             IShell::state currentState(State());
@@ -623,7 +645,9 @@ namespace PluginHost
                 }
             }
 
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
             Unlock();
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         }
 
         return (result);
@@ -632,6 +656,7 @@ namespace PluginHost
     /* virtual */ Core::hresult Server::Service::Unavailable(const reason why) {
         Core::hresult result = Core::ERROR_NONE;
 
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -667,6 +692,7 @@ namespace PluginHost
             _administrator.Notification(PluginHost::Server::ForwardMessage(callSign, string(_T("{\"state\":\"unavailable\",\"reason\":\"")) + textReason.Data() + _T("\"}")));
         }
 
+            TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         Unlock();
 
         return (result);
@@ -676,6 +702,7 @@ namespace PluginHost
     Core::hresult Server::Service::Hibernate(const uint32_t timeout VARIABLE_IS_NOT_USED) /* override */ {
         Core::hresult result = Core::ERROR_NONE;
 
+        TRACE_L1("## %s Lock", Callsign().c_str());
         Lock();
 
         IShell::state currentState(State());
@@ -698,6 +725,7 @@ namespace PluginHost
 #ifdef HIBERNATE_SUPPORT_ENABLED
                 Core::process_t parentPID = local->ParentPID();
                 local->Release();
+            TRACE_L1("## %s Unlock", Callsign().c_str());
                 Unlock();
 
                 TRACE(Activity, (_T("Hibernation of plugin [%s] process [%u]"), Callsign().c_str(), parentPID));
@@ -707,6 +735,7 @@ namespace PluginHost
                     SYSLOG(Logging::Startup, (_T("Hibernation aborted of plugin [%s] process [%u]"), Callsign().c_str(), parentPID));
                     result = Core::ERROR_ABORTED;
                 }
+                TRACE_L1("## %s Unlock", Callsign().c_str());
                 Unlock();
 
                 if (result == HIBERNATE_ERROR_NONE) {
@@ -739,7 +768,9 @@ namespace PluginHost
                 }
             }
         }
+        TRACE_L1("## %s Unlock", Callsign().c_str());
         Unlock();
+        TRACE_L1("## %s Unlock", Callsign().c_str());
 
         return (result);
 
@@ -748,6 +779,7 @@ namespace PluginHost
     uint32_t Server::Service::Wakeup(const uint32_t timeout VARIABLE_IS_NOT_USED) {
         Core::hresult result = Core::ERROR_NONE;
 
+        TRACE_L1(">> %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         IShell::state currentState(State());
 
         if (currentState != IShell::state::HIBERNATED) {
@@ -781,7 +813,7 @@ namespace PluginHost
                 local->Release();
             }
         }
-
+        TRACE_L1("<< %s for %s", __PRETTY_FUNCTION__, Callsign().c_str());
         return (result);
     }
 
@@ -804,9 +836,11 @@ namespace PluginHost
                 if (State() != IShell::HIBERNATED) {
                     SYSLOG(Logging::Startup, (_T("Hibernation aborted of plugin [%s] child process [%u]"), Callsign().c_str(), *iter));
                     result = Core::ERROR_ABORTED;
+                TRACE_L1("## %s Unlock", Callsign().c_str());
                     Unlock();
                     break;
                 }
+                TRACE_L1("## %s Unlock", Callsign().c_str());
                 Unlock();
                 result = HibernateProcess(timeout, *iter, _administrator.Configuration().HibernateLocator().c_str(), _T(""), &_hibernateStorage);
                 if (result == HIBERNATE_ERROR_NONE) {
