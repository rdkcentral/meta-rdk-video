Index: git/RuntimeManager/RuntimeManagerImplementation.cpp
===================================================================
--- git.orig/RuntimeManager/RuntimeManagerImplementation.cpp
+++ git/RuntimeManager/RuntimeManagerImplementation.cpp
@@ -558,6 +558,11 @@ err_ret:
                 config.mWesterosSocketPath = westerosSocket;
             }
 
+            // DAC applications will have dacbundle environment variable set.
+            bool legacyContainer = (runtimeConfigObject.envVariables.find("dacbundle") == std::string::npos);
+            legacyContainer = false;
+            LOGINFO("legacyContainer: %s", legacyContainer ? "true" : "false");
+
             if (xdgRuntimeDir.empty() || waylandDisplay.empty())
             {
                 LOGERR("Missing required environment variables: XDG_RUNTIME_DIR=%s, WAYLAND_DISPLAY=%s",
@@ -566,7 +571,7 @@ err_ret:
                 status = Core::ERROR_GENERAL;
             }
             /* Generate dobbySpec */
-            else if (false == RuntimeManagerImplementation::generate(config, runtimeConfigObject, dobbySpec))
+            else if (legacyContainer && false == RuntimeManagerImplementation::generate(config, runtimeConfigObject, dobbySpec))
             {
                 LOGERR("Failed to generate dobbySpec");
                 status = Core::ERROR_GENERAL;
@@ -579,12 +584,18 @@ err_ret:
                 LOGINFO("Environment Variables: XDG_RUNTIME_DIR=%s, WAYLAND_DISPLAY=%s",
                      xdgRuntimeDir.c_str(), waylandDisplay.c_str());
                 std::string command = "";
+                LOGINFO("[Jose] app path : %s ", runtimeConfigObject.unpackedPath.c_str());
+                std::string appPath = runtimeConfigObject.unpackedPath;
                 if(isOCIPluginObjectValid())
                 {
                     string containerId = getContainerId(appInstanceId);
                     if (!containerId.empty())
                     {
-                        status =  mOciContainerObject->StartContainerFromDobbySpec(containerId, dobbySpec, command, westerosSocket, descriptor, success, errorReason);
+                        if(legacyContainer)
+                            status =  mOciContainerObject->StartContainerFromDobbySpec(containerId, dobbySpec, command, westerosSocket, descriptor, success, errorReason);
+                        else
+                            status = mOciContainerObject->StartContainer(containerId, appPath, command, westerosSocket, descriptor, success, errorReason);
+
                         if ((success == false) || (status != Core::ERROR_NONE))
                         {
                             LOGERR("Failed to Run Container %s",errorReason.c_str());
