diff --git a/PowerManager/DeepSleepController.cpp b/PowerManager/DeepSleepController.cpp
index 5eb7f59..1d77732 100755
--- a/PowerManager/DeepSleepController.cpp
+++ b/PowerManager/DeepSleepController.cpp
@@ -18,7 +18,9 @@
  */
 
 #include <chrono>
+#include <cstdint>
 #include <errno.h>    // for errno
+#include <fstream>    // for ifstream
 #include <functional> // for function
 #include <memory>
 
@@ -95,6 +97,14 @@ void DeepSleepWakeupSettings::initializeTimeZone()
     _maptzValues["EST05EDT,M3.2.0,M11.1.0"]   = tzEST05EDT;
 }
 
+uint32_t DeepSleepWakeupSettings::secure_random() const
+{
+    std::ifstream urandom("/dev/urandom", std::ios::in | std::ios::binary);
+    uint32_t value;
+    urandom.read(reinterpret_cast<char*>(&value), sizeof(value));
+    return value;
+}
+
 /*  Get Wakeup timeout.
     Wakeup the box to do Maintenance related activities.
 */
@@ -102,9 +112,12 @@ uint32_t DeepSleepWakeupSettings::getWakeupTime() const
 {
     time_t now = 0, wakeup = 0;
     struct tm wakeupTime     = { 0 };
-    uint32_t wakeupTimeInSec = 0, getTZDiffTime = 0;
+    uint32_t wakeupTimeInSec = 0;
+    uint32_t getTZDiffTime   = 0;
     uint32_t wakeupTimeInMin = 5;
 
+    const uint32_t limit = 6 * 24 * 60 * 60; // 6 days limit in seconds
+
     /* Read the wakeup Time in Seconds from /tmp override
        else calculate the Wakeup time till 2AM */
     FILE* fp = fopen("/tmp/deepSleepWakeupTimer", "r");
@@ -112,9 +125,10 @@ uint32_t DeepSleepWakeupSettings::getWakeupTime() const
         if (0 > fscanf(fp, "%d", &wakeupTimeInMin)) {
             LOGINFO("Error: fscanf on wakeupTimeInSec failed");
         } else {
-            wakeupTimeInSec = wakeupTimeInMin * 60;
+            wakeupTimeInSec = wakeupTimeInMin * 60 > limit ? limit : wakeupTimeInMin * 60;
             fclose(fp);
-            LOGINFO("/tmp/ override Deep Sleep Wakeup Time is %d", wakeupTimeInSec);
+            LOGINFO("/tmp/ override Deep Sleep Wakeup Time is %" PRIu32, wakeupTimeInSec);
+
             return wakeupTimeInSec;
         }
         fclose(fp);
@@ -148,15 +162,14 @@ uint32_t DeepSleepWakeupSettings::getWakeupTime() const
         /* Add randomness to calculated value i.e between 2AM - 3AM
             for 1 hour window
         */
-        srand(time(NULL));
-        uint32_t randTimeInSec = (uint32_t)rand() % (3600) + 0; // for 1 hour window
+        uint32_t randTimeInSec = secure_random() % 3600; // for 1 hour window
         wakeupTimeInSec        = wakeupTimeInSec + randTimeInSec;
-        LOGINFO("Calculated Deep Sleep Wakeup Time Before TZ setting is %d Sec", wakeupTimeInSec);
+        LOGINFO("Calculated Deep Sleep Wakeup Time Before TZ setting is %" PRIu32 "Sec", wakeupTimeInSec);
 
         getTZDiffTime   = getTZDiffInSec();
         wakeupTimeInSec = wakeupTimeInSec + getTZDiffTime;
 
-        LOGINFO("Calculated Deep Sleep Wakeup Time After TZ setting is %d Sec", wakeupTimeInSec);
+        LOGINFO("Calculated Deep Sleep Wakeup Time After TZ setting is %" PRIu32 "Sec", wakeupTimeInSec);
 
         return wakeupTimeInSec;
     }
diff --git a/PowerManager/DeepSleepController.h b/PowerManager/DeepSleepController.h
index 53a5435..ea7c0d6 100755
--- a/PowerManager/DeepSleepController.h
+++ b/PowerManager/DeepSleepController.h
@@ -96,6 +96,9 @@ private:
     */
     uint32_t getWakeupTime() const;
 
+    /* Secure 32-bit random number from /dev/urandom. */
+    uint32_t secure_random() const;
+
 private:
     Settings& _settings;
     bool _isDeepSleepTimeoutSet;
diff --git a/PowerManager/RebootController.cpp b/PowerManager/RebootController.cpp
index b3e040c..d5d5034 100755
--- a/PowerManager/RebootController.cpp
+++ b/PowerManager/RebootController.cpp
@@ -120,7 +120,7 @@ int RebootController::fetchRFCValueInt(const char* key)
     char rfcVal[MAX_RFC_LEN + 1] = { 0 };
     int len = 0;
 
-    if (WDMP_SUCCESS == getRFCParameter("PwrMgr", key, &param)) {
+    if (WDMP_SUCCESS == getRFCParameter((char*)"PwrMgr", key, &param)) {
         len = strlen(param.value);
         if (len > MAX_RFC_LEN) {
             len = MAX_RFC_LEN;
@@ -145,7 +145,7 @@ bool RebootController::isStandbyRebootEnabled()
 {
     RFC_ParamData_t rfcParam;
     const char* key = STANDBY_REBOOT_ENABLE;
-    if (WDMP_SUCCESS == getRFCParameter("PwrMgr", key, &rfcParam)) {
+    if (WDMP_SUCCESS == getRFCParameter((char*)"PwrMgr", key, &rfcParam)) {
         return (strncasecmp(rfcParam.value, "true", 4) == 0);
     }
 
diff --git a/PowerManager/Settings.cpp b/PowerManager/Settings.cpp
index a6466ab..6b3682d 100755
--- a/PowerManager/Settings.cpp
+++ b/PowerManager/Settings.cpp
@@ -16,6 +16,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+#include <cstring>
 #include <sstream>
 
 #include "plat_power.h"
@@ -110,7 +111,13 @@ public:
         const auto expected_size      = Size();
 
         if (header.length == expected_size) {
-            lseek(fd, 0, SEEK_SET);
+
+            off_t ret = lseek(fd, 0, SEEK_SET);
+            if (ret == (off_t)-1) {
+                LOGERR("Failed to reset seek offset %s", strerror(errno));
+                return false;
+            }
+
             const auto read_size = read(fd, &pwrSettings, expected_size);
             if (read_size != expected_size) {
                 // failure
@@ -147,7 +154,12 @@ public:
             .padding            = { 0 }
         };
 
-        lseek(fd, 0, SEEK_SET);
+        off_t ret = lseek(fd, 0, SEEK_SET);
+        if (ret == (off_t)-1) {
+            LOGERR("FATAL failed to reset seek offset %s", strerror(errno));
+            return false;
+        }
+
         auto res = write(fd, &pwrSettings, Size());
         if (res < 0) {
             LOGERR("Failed to write settings %s", strerror(errno));
diff --git a/PowerManager/ThermalController.h b/PowerManager/ThermalController.h
index 9605d03..1d1e649 100755
--- a/PowerManager/ThermalController.h
+++ b/PowerManager/ThermalController.h
@@ -50,8 +50,8 @@
 #endif
 
 #define STANDBY_REASON_FILE       "/opt/standbyReason.txt"
-#define THERMAL_PROTECTION_GROUP  "Thermal_Config"
-#define THERMAL_SHUTDOWN_REASON   "THERMAL_SHUTDOWN"
+#define THERMAL_PROTECTION_GROUP  (char*)"Thermal_Config"
+#define THERMAL_SHUTDOWN_REASON   (char*)"THERMAL_SHUTDOWN"
 
 
 class ThermalController {
diff --git a/SystemServices/SystemServices.cpp b/SystemServices/SystemServices.cpp
index 1604be6..5b7e439 100755
--- a/SystemServices/SystemServices.cpp
+++ b/SystemServices/SystemServices.cpp
@@ -4605,14 +4605,14 @@ namespace WPEFramework {
                 for(uint32_t i =0; i<wakeupSrcs.Length();i++)
                 {
                     JsonObject wakeupSrc = wakeupSrcs.Get(i).Object();
-                    for(uint32_t src = WPEFramework::Exchange::IPowerManager::WAKEUP_SRC_VOICE; src <= WPEFramework::Exchange::IPowerManager::WAKEUP_SRC_RF4CE; src++)
+                    for(uint32_t src = WPEFramework::Exchange::IPowerManager::WAKEUP_SRC_VOICE; src < WPEFramework::Exchange::IPowerManager::WAKEUP_SRC_MAX; src<<=1)
                     {
                         if(wakeupSrc.HasLabel(getWakeupSrcString(src)))
                         {
-                            srcType |= (1<<src);
+                            srcType |= src;
                             if (wakeupSrc[getWakeupSrcString(src)].Boolean())
                             {
-                                config |= (1<<src);
+                                config |= src;
                             }
                             if ((WPEFramework::Exchange::IPowerManager::WAKEUP_SRC_WIFI == src) || (WPEFramework::Exchange::IPowerManager::WAKEUP_SRC_LAN == src))
                             {
diff --git a/SystemServices/SystemServicesHelper.h b/SystemServices/SystemServicesHelper.h
index d6201f0..6a665fa 100644
--- a/SystemServices/SystemServicesHelper.h
+++ b/SystemServices/SystemServicesHelper.h
@@ -63,9 +63,6 @@
 #define MODE_TIMER_UPDATE_INTERVAL	1000
 #define CURL_BUFFER_SIZE	(64 * 1024) /* 256kB */
 
-#define IARM_BUS_PWRMGR_NAME					"PWRMgr"  /*!< Power manager IARM bus name */
-#define IARM_BUS_PWRMGR_API_SetDeepSleepTimeOut	"SetDeepSleepTimeOut" /*!< Sets the timeout for deep sleep*/
-
 #define MODE_NORMAL     "NORMAL"
 #define MODE_EAS        "EAS"
 #define MODE_WAREHOUSE  "WAREHOUSE"
